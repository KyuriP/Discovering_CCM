---
title: "Discovering Cyclic Causal Models in Psychological Research"
subtitle: "Supplementary Material" 
author: "Kyuri Park"
doi: "10.5281/zenodo.7851235"
abstract: "This supplementary material provides additional details on the results of the main simulation study and includes extra analyses related to algorithm running time and the empirical example."
format: 
  html:
    theme: Yeti
    toc: true
    smooth-scroll: true
    number-sections: true
    code-fold: true
    code-overflow: scroll
    code-summary: "See code here."
    embed-resources: true
    highlight: tango
    fig-responsive: true
    code-block-bg: rgba(233,236,239,.65)
    css: style.css
bibliography: references.bib
csl: apa.csl
editor: visual
execute:
    warning: false
    message: false
---

```{r setup}
#| include: false
#| results: hide
#| fig-show: hide

# chunk settings
knitr::opts_chunk$set(
   message = FALSE,
   warning = FALSE,
   comment = NA,
   fig.align = "center",
   results = "hide")

# suppress ggplot warnings
options(warn = -1) 

## load functions & packages
source("../  utils/CCD_fnc.R")
source("../  utils/plot_fnc.R")
source("../  utils/data_generating_fnc.R")
source("../  utils/eval_metrics_fnc.R")
source("../  utils/true_ancestral_fnc.R")

library(magrittr)
library(purrr)
library(furrr)
library(dplyr)
library(qgraph)
library(ggplot2)
library(ggpubr)

## slightly modified CCI package
#install_github("KyuriP/CCI_KP")
library(CCI.KP)

#remotes::install_github("joshuaulrich/microbenchmark")
library(microbenchmark)

# set the seed
set.seed(123)
```

<hr>

# Introduction

Statistical network models have gained popularity in analyzing multivariate psychological data [@borsboom_network_2021]. In empirical practice, network parameters are often interpreted as reflecting causal relationships -- an approach that can be characterized as a form of causal discovery. However, recent research has shown that network models may not perform well as causal discovery tools for discovering acyclic causal structures (DAGs), and alternative methods are preferred for this task [@Ryan2022]. But, acyclic causal models may not be suitable for some psychological phenomena, such as psychopathologies, which we expect to have cycles or feedback loop relationships between symptoms [@borsboom_network_2017]. While cyclic causal discovery methods have been developed in the computer science literature, they are not widely applied or well understood in empirical practice [@Bongers2021; @peters_elements_2017]. To address this gap, the main paper provides an accessible introduction to the basics of cyclic causal discovery for empirical researchers [@Park_Discovering_cyclic_causal_2023]. It examines three different cyclic causal discovery methods --- CCD [@richardson1996], FCI [@mooij_classen2020] and CCI [@strobl2019] --- and investigates their performance in typical psychological research contexts through a simulation study.

This supplementary material provides more detailed results from the main simulation study, including the estimated partial ancestral graphs (PAGs) from each simulated condition and their corresponding accuracy and uncertainty measures at the edge-endpoint level. Specifically, we present the proportion of correct predictions and the proportion of circle marks produced for each endpoint out of 500 iterations. Additionally, we report findings from a comparison of the running time for the algorithms discussed in the paper. Lastly, we present the results from additional empirical analyses using the same dataset as in the original study [@mcnally_co-morbid_2017].

<hr>

# Simulation Conditions

Below, we show the directed cyclic graph (DCG) and the corresponding true ancestral graph for each condition. There are in total eight conditions: model size ($p = 5$, $p = 10$) $\times$ density (sparse, dense) $\times$ presence of latent confounder (presence, absence). Note that $p$ refers to the number of variables.

Eight conditions include: 5p sparse, 5p dense, 10p sparse, 10p dense, 5p sparse with LC (latent confounder), 5p dense with LC, 10p sparse with LC. 10p dense with LC.

```{r}
#|label: simulation-specifics

## simulation design specifics
# specify the sample sizes
N <- c(50, 150, 500, 1000, 2000, 3000, 4000, 5000, 7500, 10000)
# specify replication number
n <- 500
# specify alpha level
alpha <- 0.01
# allow parallel processing
plan(multisession) 
```

## 5p_sparse

```{r}
#|label: 5psparse

## ====================
## 5p - sparse
## ====================

## Specify B matrix
B5sparse = matrix(c(0, 0, 0, 0, 0,
                 1, 0, 0.8, 0, 0,
                 0, 0, 0, 0.9, 0,
                 0, 0.7, 0, 0, 1.5,
                 0, 0, 0, 0, 0), 5, 5, byrow = T)
dimnames(B5sparse) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))

## Specify layout
layout5 = matrix(c(0,1,
                   0,0,
                   1,-1,
                   2,0,
                   2,1),5,2,byrow = T)

par(oma=c(0, 0, 4, 0), mfrow=c(1,2))
true5psparse <- qgraph(t(B5sparse), layout=layout5, labels = colnames(B5sparse), theme="colorblind")
title("Directed cyclic graph",  font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.16)

## True Ancestral Graph
dcg_5psparse <- matrix(c(0,1,0,0,0,
                         0,0,0,1,0,
                         0,1,0,0,0,
                         0,0,1,0,0,
                         0,0,0,1,0), 5,5,byrow=T)
trueag_5psparse <- true_ancestral(dcg_5psparse, gen_dat(B5sparse), gaussCItest)
dimnames(trueag_5psparse) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))
plotAG(trueag_5psparse)
title(main = "True ancestral graph", font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.86)

## Load results from running algorithms
load("../    simulation/data/fixedB_n500/mat_5psparse.RData")
load("../    simulation/data/fixedB_n500/fci_5psparse.RData")
load("../    simulation/data/fixedB_n500/cci_5psparse.RData")

## Evaluation 
# CCD
res_ccd5psparse <- mat_5psparse %>% 
  map_depth(2, ~precision_recall(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_ccd5psparse <- mat_5psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% do.call("cbind", .) %>% apply(., 2, unlist) %>%  as.data.frame %>% 
  rename_with(~ paste0("N = ", N))
# SHD
SHD_ccd5psparse <- mat_5psparse %>% 
  map_depth(2, ~SHD(trueag_5psparse, .x)) %>% do.call("cbind", .) %>% apply(., 2, unlist) %>%  as.data.frame %>% rename_with(~ paste0("N = ", N))

# FCI
res_fci5psparse <- fci_5psparse %>% 
  map_depth(2, ~precision_recall(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_fci5psparse <- fci_5psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_fci5psparse <- fci_5psparse %>% 
  map_depth(2, ~SHD(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# CCI
res_cci5psparse <- cci_5psparse %>% 
  map_depth(2, ~precision_recall(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_cci5psparse <- cci_5psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_cci5psparse <- cci_5psparse %>% 
  map_depth(2, ~SHD(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
```

## 5p_dense

```{r}
#|label: 5pdense

## ====================
## 5p - dense
## ====================

## Specify B matrix
B5dense = matrix(c(0, 0, 0, 0, 0,
                   1, 0, 0.8, 0, 0,
                   0, 0, 0, 0.9, 0,
                   0, 0.7, 0, 0, 1.5,
                   1, 0, 0, 0, 0), 5, 5, byrow = T)
dimnames(B5dense) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))

par(oma=c(0, 0, 4, 0), mfrow=c(1,2))
true5pdense <- qgraph(t(B5dense), layout=layout5, labels = colnames(B5dense), theme="colorblind")
title("Directed cyclic graph",  font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.16)

# True Ancestral Graph
dcg_5pdense <- matrix(c(0,1,0,0,1,
                        0,0,0,1,0,
                        0,1,0,0,0,
                        0,0,1,0,0,
                        0,0,0,1,0), 5,5,byrow=T)

trueag_5pdense <- true_ancestral(dcg_5pdense, gen_dat(B5dense), gaussCItest)
dimnames(trueag_5pdense) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))
plotAG(trueag_5pdense)
title(main = "True ancestral graph", font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.86)

## Load results from running algorithms
load("../    simulation/data/fixedB_n500/mat_5pdense.RData")
load("../    simulation/data/fixedB_n500/fci_5pdense.RData")
load("../    simulation/data/fixedB_n500/cci_5pdense.RData")

## Evaluation 
# CCD
res_ccd5pdense <- mat_5pdense %>% 
  map_depth(2, ~precision_recall(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame()
# UNCERTAINTY
uncer_ccd5pdense <- mat_5pdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_ccd5pdense <- mat_5pdense %>% 
  map_depth(2, ~SHD(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# FCI
res_fci5pdense <- fci_5pdense %>% 
  map_depth(2, ~precision_recall(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_fci5pdense <- fci_5pdense%>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_fci5pdense <- fci_5pdense %>% 
  map_depth(2, ~SHD(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# CCI
res_cci5pdense <- cci_5pdense %>% 
  map_depth(2, ~precision_recall(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY 
uncer_cci5pdense <- cci_5pdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_cci5pdense <- cci_5pdense %>% 
  map_depth(2, ~SHD(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
```

## 10p_sparse

```{r}
#| label: 10psparse

## ====================
## 10p - sparse
## ====================

## Specify B matrix
B10sparse = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0.8, 0, 0, 0, 0, 0, 0, 0, 
                     0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                     0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 
                     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0.8, 0, 
                     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 10, 10, byrow = T)
dimnames(B10sparse) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))

## Specify layout
layout10 = matrix(c(0,1,
                      2,1,
                      1,0,
                      2,-1,
                      3,0,
                      4, -1,
                      5, 0,
                      6, -1,
                      4, 1,
                      7, 1),10,2,byrow = T)
par(oma=c(0, 0, 4, 0), mfrow=c(1,2))
true10psparse <- qgraph(t(B10sparse), layout = layout10, labels = colnames(B10sparse), theme="colorblind")
title("Directed cyclic graph",  font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.16)

## True Ancestral Graph
dcg_10psparse <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                          0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
                          0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                          0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                          0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                          0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                          0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                          0, 0, 0, 0, 0, 0, 0, 0, 1, 0), 10, 10, byrow = T)

trueag_10psparse <- true_ancestral(dcg_10psparse, gen_dat(B10sparse), gaussCItest)
dimnames(trueag_10psparse) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))
plotAG(trueag_10psparse)
title(main = "True ancestral graph", font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.86)

## Load results from running algorithms
load("../    simulation/data/fixedB_n500/mat_10psparse.RData")
load("../    simulation/data/fixedB_n500/fci_10psparse.RData")
load("../    simulation/data/fixedB_n500/cci_10psparse.RData")

## Evaluation 
# CCD
res_ccd10psparse <- mat_10psparse %>% 
  map_depth(2, 
  ~precision_recall(trueag_10psparse, .x)) %>%
  do.call("cbind", .) %>% t() %>%  
  apply(., 2, unlist) %>%  as.data.frame()
# UNCERTAINTY
uncer_ccd10psparse <- mat_10psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_ccd10psparse <- mat_10psparse %>% 
  map_depth(2, ~SHD(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# FCI
res_fci10psparse <- fci_10psparse %>% 
  map_depth(2, ~precision_recall(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_fci10psparse <- fci_10psparse%>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_fci10psparse <- fci_10psparse %>% 
  map_depth(2, ~SHD(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# CCI
res_cci10psparse <- cci_10psparse %>% 
  map_depth(2, ~precision_recall(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_cci10psparse <- cci_10psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_cci10psparse <- cci_10psparse %>% 
  map_depth(2, ~SHD(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

```

## 10p_dense

```{r}
#| label: 10pdense

## ====================
## 10p - dense
## ====================

## Specify B matrix
B10dense = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0.3, 0, 0.8, 0, 0, 0, 0, 0, 0, 0, 
                    0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 
                    0, 0.4, 0, 1, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0.8, 1, 
                    0, 0, 0, 0, 0, 0, 1, 0, 0, 0.4, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 10, 10, byrow = T)
dimnames(B10dense) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))

par(oma=c(0, 0, 4, 0), mfrow=c(1,2))
true10pdense <- qgraph(t(B10dense), layout = layout10, labels = colnames(B10dense), theme="colorblind")
title("Directed cyclic graph",  font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.16)

## True Ancestral Graph
dcg_10pdense <- matrix(c(0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
                         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                         0, 0, 0, 0, 0, 0, 1, 1, 1, 0), 10, 10, byrow = T)

trueag_10pdense <- true_ancestral(dcg_10pdense, gen_dat(B10dense), gaussCItest)
dimnames(trueag_10pdense) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))
plotAG(trueag_10pdense)
title(main = "True ancestral graph", font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.86)

## Load results from running algorithms
load("../    simulation/data/fixedB_n500/mat_10pdense.RData")
load("../    simulation/data/fixedB_n500/fci_10pdense.RData")
load("../    simulation/data/fixedB_n500/cci_10pdense.RData")

## Evaluation 
# CCD
res_ccd10pdense  <- mat_10pdense  %>% 
  map_depth(2, ~precision_recall(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_ccd10pdense  <- mat_10pdense  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_ccd10pdense  <- mat_10pdense %>% 
  map_depth(2, ~SHD(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))


# FCI
res_fci10pdense  <- fci_10pdense  %>% 
  map_depth(2, ~precision_recall(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_fci10pdense <- fci_10pdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_fci10pdense  <- fci_10pdense %>% 
  map_depth(2, ~SHD(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# CCI
res_cci10pdense <- cci_10pdense %>% 
  map_depth(2, ~precision_recall(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_cci10pdense <- cci_10pdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_cci10pdense <- cci_10pdense %>% 
  map_depth(2, ~SHD(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
```

## 5p_sparse_with_LC

```{r}
#| label: 5pLVsparse

## ====================
## 5p with LV sparse
## ====================

## Specify B matrix
B5_lvsparse = matrix(c(0, 0, 0, 0, 0, 1,
                       0, 0, 0.8, 0, 0, 1,
                       0, 0, 0, 0.9, 0,0,
                       0, 0.7, 0, 0, 1.5,0,
                       0, 0, 0, 0, 0,0,
                       0,0,0,0,0,0), 6, 6, byrow = T)
dimnames(B5_lvsparse) <- list(c(paste("X", 1:5, sep=""), "L1"), c(paste("X", 1:5, sep=""), "L1"))

## Specify layout
layout5_lv = matrix(c(0,1,
                      0,0,
                      1,-1,
                      2,0,
                      2,1,
                      -1, 0.5),6,2,byrow = T)
par(oma=c(0, 0, 4, 0), mfrow=c(1,2))
true5p_lvsparse <- qgraph(t(B5_lvsparse), layout=layout5_lv, labels = colnames(B5_lvsparse), theme="colorblind")
title("Directed cyclic graph",  font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.16)

## True Ancestral Graph
# [i,j] = [j,i] = 2: a LV exists between i and j
dcg_5psparseLV <- matrix(c(0, 2, 0, 0, 0, 
                           2, 0, 0, 1, 0, 
                           0, 1, 0, 0, 0,
                           0, 0, 1, 0, 0,
                           0, 0, 0, 1, 0), 5, 5, byrow = T)

trueag_5psparseLV <- true_ancestral(dcg_5psparseLV, gen_dat(B5_lvsparse), gaussCItest)
dimnames(trueag_5psparseLV) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))
plotAG(trueag_5psparseLV)
title(main = "True ancestral graph", font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.86)

## Load results from running algorithms
load("../    simulation/data/fixedB_n500/mat_5pLVsparse.RData")
load("../    simulation/data/fixedB_n500/fci_5pLVsparse.RData")
load("../    simulation/data/fixedB_n500/cci_5pLVsparse.RData")

## Evaluation 
# CCD
res_ccd5pLVsparse  <- mat_5pLVsparse  %>% 
  map_depth(2, ~precision_recall(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_ccd5pLVsparse  <- mat_5pLVsparse  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_ccd5pLVsparse <- mat_5pLVsparse %>% 
  map_depth(2, ~SHD(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# FCI
res_fci5pLVsparse  <- fci_5pLVsparse  %>% 
  map_depth(2, ~precision_recall(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_fci5pLVsparse <- fci_5pLVsparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_fci5pLVsparse <- fci_5pLVsparse %>% 
  map_depth(2, ~SHD(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# CCI
res_cci5pLVsparse <- cci_5pLVsparse %>% 
  map_depth(2, ~precision_recall(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_cci5pLVsparse <- cci_5pLVsparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_cci5pLVsparse <- cci_5pLVsparse %>% 
  map_depth(2, ~SHD(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

```

## 5p_dense_with_LC

```{r}
#| label: 5pLVdense

## ====================
## 5p with LV dense
## ====================

## specify B matrix
B5_lvdense = matrix(c(0, 0, 0, 0, 0, 1,
                      0, 0, 0.8, 0, 0, 1,
                      0, 0, 0, 0.9, 0, 0,
                      0, 0.7, 0, 0, 1.5, 0,
                      1, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0), 6, 6, byrow = T)
dimnames(B5_lvdense) <- list(c(paste("X", 1:5, sep=""), "L1"), c(paste("X", 1:5, sep=""), "L1"))

par(oma=c(0, 0, 4, 0), mfrow=c(1,2))
true5p_lvdense <- qgraph(t(B5_lvdense), layout=layout5_lv, labels = colnames(B5_lvdense), theme="colorblind")
title("Directed cyclic graph",  font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.16)

## True Ancestral Graph
# [i,j] = [j,i] = 2: a LV exists between i and j
dcg_5pdenseLV <- matrix(c(0, 2, 0, 0, 1, 
                          2, 0, 0, 1, 0, 
                          0, 1, 0, 0, 0,
                          0, 0, 1, 0, 0,
                          0, 0, 0, 1, 0), 5, 5, byrow = T)

trueag_5pdenseLV <- true_ancestral(dcg_5pdenseLV, gen_dat(B5_lvdense), gaussCItest)
dimnames(trueag_5pdenseLV) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))
plotAG(trueag_5pdenseLV)
title(main = "True ancestral graph", font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.86)

## Load results from running algorithms
load("../    simulation/data/fixedB_n500/mat_5pLVdense.RData")
load("../    simulation/data/fixedB_n500/fci_5pLVdense.RData")
load("../    simulation/data/fixedB_n500/cci_5pLVdense.RData")

## Evaluation 
# CCD
res_ccd5pLVdense  <- mat_5pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_5pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_ccd5pLVdense  <- mat_5pLVdense  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_ccd5pLVdense <- mat_5pLVdense %>% 
  map_depth(2, ~SHD(trueag_5pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# FCI
res_fci5pLVdense  <- fci_5pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_5pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_fci5pLVdense <- fci_5pLVdense  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_fci5pLVdense  <- fci_5pLVdense  %>% 
  map_depth(2, ~SHD(trueag_5pdenseLV , .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# CCI
res_cci5pLVdense  <- cci_5pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_5pdenseLV , .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_cci5pLVdense  <- cci_5pLVdense  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_cci5pLVdense  <- cci_5pLVdense  %>% 
  map_depth(2, ~SHD(trueag_5pdenseLV , .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
```

## 10p_sparse_with_LC

```{r}
#| label: 10pLVsparse

## ====================
## 10p with LV sparse
## ====================

## Specify B matrix
B10_lvsparse = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 0.7,
                        0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0.7,
                        0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0.8, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 12, 12, byrow = T)
dimnames(B10_lvsparse) <- list(c(paste("X", 1:10, sep=""), "L1", "L2"), 
                               c(paste("X", 1:10, sep=""), "L1", "L2"))

## Specify layout
layout10LV2 = matrix(c(0, 1,
                      2, 1,
                      1, 0,
                      2, -1,
                      3, 0,
                      4, -1,
                      5, 0,
                      6, -1,
                      4, 1,
                      7, 1,
                      8, 0,
                      3, 2), 12, 2, byrow = T)

par(oma=c(0, 0, 4, 0), mfrow=c(1,2))
true10pLVsparse <- qgraph(t(B10_lvsparse), layout = layout10LV2, labels = colnames(B10_lvsparse), theme="colorblind")
title("Directed cyclic graph",  font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.16)

## True Ancestral Graph
# [i,j] = [j,i] = 2: a LV exists between i and j
dcg_10psparseLV <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
                            0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
                            0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                            0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 
                            0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                            0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
                            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                            0, 0, 0, 0, 0, 0, 0, 2, 1, 0), 10, 10, byrow = T)

trueag_10psparseLV <- true_ancestral(dcg_10psparseLV, gen_dat(B10_lvsparse), gaussCItest)
dimnames(trueag_10psparseLV) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))
plotAG(trueag_10psparseLV)
title(main = "True ancestral graph", font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.86)

## Load results from running algorithms
load("../    simulation/data/fixedB_n500/mat_10pLVsparse.RData")
load("../    simulation/data/fixedB_n500/fci_10pLVsparse.RData")
load("../    simulation/data/fixedB_n500/cci_10pLVsparse.RData")

## Evaluation 
# CCD
res_ccd10pLVsparse   <- mat_10pLVsparse  %>% 
  map_depth(2, ~precision_recall(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_ccd10pLVsparse  <- mat_10pLVsparse  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_ccd10pLVsparse <- mat_10pLVsparse %>% 
  map_depth(2, ~SHD(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# FCI
res_fci10pLVsparse <- fci_10pLVsparse  %>% 
  map_depth(2, ~precision_recall(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_fci10pLVsparse <- fci_10pLVsparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_fci10pLVsparse <- fci_10pLVsparse %>% 
  map_depth(2, ~SHD(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# CCI 
res_cci10pLVsparse <- cci_10pLVsparse %>% 
  map_depth(2, ~precision_recall(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_cci10pLVsparse <- cci_10pLVsparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_cci10pLVsparse <- cci_10pLVsparse %>% 
  map_depth(2, ~SHD(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
```

## 10p_dense_with LC

```{r}
#| label: 10pLVdense

## ====================
## 10p with LV dense
## ====================

## Specify B matrix
B10_lvdense = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0.5, 0, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 0.7,
                       0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 0, 0,
                       0, 0, 1.2, 1, 0, 0, 0, 0, 0, 0, 0, 0.7,
                       0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0.8, 0.5, 0.4, 0,
                       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0.8, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 12, 12, byrow = T)
dimnames(B10_lvdense) <- list(c(paste("X", 1:10, sep=""), "L1", "L2"), 
                               c(paste("X", 1:10, sep=""), "L1", "L2"))

par(oma=c(0, 0, 4, 0), mfrow=c(1,2))
true10pLVdense <- qgraph(t(B10_lvdense), layout = layout10LV2, labels = colnames(B10_lvdense), theme="colorblind")
title("Directed cyclic graph",  font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.16)

## True Ancestral Graph
# [i,j] = [j,i] = 2: a LV exists between i and j
dcg_10pdenseLV <- matrix(c(0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
                           0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 
                           0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                           0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 
                           0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                           0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
                           0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                           0, 0, 0, 0, 0, 0, 2, 2, 1, 0), 10, 10, byrow = T)

trueag_10pdenseLV <- true_ancestral(dcg_10pdenseLV, gen_dat(B10_lvdense), gaussCItest)
dimnames(trueag_10pdenseLV) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))
plotAG(trueag_10pdenseLV)
title(main = "True ancestral graph", font.main = 1, cex.main = 1.2, line = 2, outer=TRUE, adj = 0.86)

## Load results from running algorithms
load("../    simulation/data/fixedB_n500/mat_10pLVdense.RData")
load("../    simulation/data/fixedB_n500/fci_10pLVdense.RData")
load("../    simulation/data/fixedB_n500/cci_10pLVdense.RData")

## Evaluation 
# CCD
res_ccd10pLVdense   <- mat_10pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_ccd10pLVdense  <- mat_10pLVdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_ccd10pLVdense <- mat_10pLVdense %>% 
  map_depth(2, ~SHD(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N)) 

# FCI
res_fci10pLVdense <- fci_10pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_fci10pLVdense <- fci_10pLVdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_fci10pLVdense <- fci_10pLVdense %>% 
  map_depth(2, ~SHD(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

# CCI
res_cci10pLVdense <- cci_10pLVdense %>% 
  map_depth(2, ~precision_recall(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_cci10pLVdense <- cci_10pLVdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# SHD
SHD_cci10pLVdense <- cci_10pLVdense %>% 
  map_depth(2, ~SHD(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
```

<hr>

# Performance Evaluation per Edge-endpoint

Below, we present the most frequently estimated PAG for each sample size (N) obtained from each algorithm. The PAGs were constructed by selecting the most frequently occurring edge-endpoint type out of 500 simulations.
We also include matrix plots that depict the proportion of correct estimation and uncertainty rates for each edge-endpoint. The color intensity in the matrix plots represents the rate of correct estimation (blue) or uncertainty (red), with darker colors indicating higher rates.


::: panel-tabset
## 5P sparse

```{r}
#| fig-width: 10
#| fig-height: 5
#| eval: false

par(mfrow=c(2,5))
vec <- list("CCD-5p-sparse" = mat_5psparse, "FCI-5p-sparse" = fci_5psparse, "CCI-5p-sparse" = cci_5psparse)

graphs_5psparse <- list()
for(i in seq_along(vec)){
  ## high-freq graphs
  graphs_5psparse[[i]] <- vec[[i]] %>% 
  map(~high_freq(.x, p = 5) %>% 
        plotAG)
  ## correct prop plots
  vec[[i]] %>% 
    imap(
      ~ prop_correct(.x, trueag_5psparse, p = 5) %>% 
        # long format
        reshape2::melt() %>% 
        ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
        geom_tile() +
        geom_text() + 
        # reverse factor level
        scale_y_discrete(limits=rev) + 
        scale_fill_gradient(low="grey90", high="blue") +
        labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
    ) %>% 
    ggpubr::ggarrange(plotlist = .,
                      ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
    ggpubr::annotate_figure(top = text_grob(glue::glue("Correct Proportion {names(vec[[i]])}"), face = "bold", size = 18, family = "Palatino"))
  ## uncertainty prop plots
  vec[[i]] %>% 
    imap(
      ~ prop_uncertain(.x, p = 5) %>% 
        # long format
        reshape2::melt() %>% 
        ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
        geom_tile() +
        geom_text() + 
        # reverse factor level
        scale_y_discrete(limits=rev) + 
        scale_fill_gradient(low="grey90", high="red") +
        labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
    ) %>% 
    ggpubr::ggarrange(plotlist = .,
                      ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
    ggpubr::annotate_figure(top = text_grob(glue::glue("Uncertainty {names(vec)[i]}"), face = "bold", size = 18, family = "Palatino"))
}

corprop_plots_5psparse <- list()
# prop correct
for(i in seq_along(vec)){
  corprop_plots_5psparse[[i]] <- vec[[i]] %>% 
    imap(
      ~ prop_correct(.x, trueag_5psparse, p = 5) %>% 
        # long format
        reshape2::melt() %>% 
        ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
        geom_tile() +
        geom_text() + 
        # reverse factor level
        scale_y_discrete(limits=rev) + 
        scale_fill_gradient(low="grey90", high="blue") +
        labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
    ) %>% 
    ggpubr::ggarrange(plotlist = .,
                      ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
    ggpubr::annotate_figure(top = text_grob(glue::glue("Correct Proportion {names(vec[[i]])}"), face = "bold", size = 18, family = "Palatino"))
}

ucprop_plots_5psparse <- list()
# prop uncertain
for(i in seq_along(vec)){
  ucprop_plots_5psparse[[i]] <- vec[[i]] %>% 
    imap(
      ~ prop_uncertain(.x, p = 5) %>% 
        # long format
        reshape2::melt() %>% 
        ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
        geom_tile() +
        geom_text() + 
        # reverse factor level
        scale_y_discrete(limits=rev) + 
        scale_fill_gradient(low="grey90", high="red") +
        labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
    ) %>% 
    ggpubr::ggarrange(plotlist = .,
                      ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
    ggpubr::annotate_figure(top = text_grob(glue::glue("Uncertainty {names(vec)[i]}"), face = "bold", size = 18, family = "Palatino"))
}
```

```{r}
#| fig-width: 10
#| fig-height: 5

## CCD 5p sparse case
# high frequency
par(mfrow=c(2,5))
mat_5psparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
mat_5psparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparse, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-5p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_5psparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-5p-sparse", face = "bold", size = 18, family = "Palatino"))


## FCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

fci_5psparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
fci_5psparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparse, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_5psparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))


## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_5psparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
cci_5psparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparse, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_5psparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))

```

## 5P dense

```{r}
#| fig-width: 10
#| fig-height: 5

## CCD 5p dense case
# high frequency 
par(mfrow=c(2,5))
mat_5pdense %>% 
  map(~high_freq(.x, p = 5) %>% 
        plotAG)

# prop correct
mat_5pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_5pdense, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-5p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_5pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-5p-dense", face = "bold", size = 18, family = "Palatino"))


## FCI 5p dense case
# high frequency 
par(mfrow=c(2,5))

fci_5pdense %>% 
  map(~high_freq(.x, p = 5) %>% 
        plotAG)

# prop correct
fci_5pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_5pdense, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-5p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_5pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-5p-dense", face = "bold", size = 18, family = "Palatino"))


## CCI 5p dense case
# high frequency 
par(mfrow=c(2,5))

cci_5pdense %>% 
  map(~high_freq(.x, p = 5) %>% 
        plotAG)

# prop correct
cci_5pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_5pdense, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-5p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_5pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-5p-dense", face = "bold", size = 18, family = "Palatino"))

```

## 10P sparse

```{r}
#| fig-width: 14
#| fig-height: 7


## CCD 10p sparse case
# high frequency 
par(mfrow=c(2,5))
mat_10psparse %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
mat_10psparse %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-10p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_10psparse %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-10p-sparse", face = "bold", size = 18, family = "Palatino"))


## FCI 10p sparse case
# high frequency 
par(mfrow=c(2,5))

fci_10psparse %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
fci_10psparse %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_10psparse %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))



## CCI 10p sparse case
# high frequency 
par(mfrow=c(2,5))

cci_10psparse %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
cci_10psparse %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_10psparse %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))

```

## 10P dense

```{r}
#| fig-width: 14
#| fig-height: 7

## CCD 10p dense case
# high frequency 
par(mfrow=c(2,5))
mat_10pdense %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
mat_10pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_10pdense, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-10p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_10pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-10p-dense", face = "bold", size = 18, family = "Palatino"))


## FCI 10p dense case
# high frequency 
par(mfrow=c(2,5))

fci_10pdense %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
fci_10pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-10p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_10pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-10p-dense", face = "bold", size = 18, family = "Palatino"))

## CCI 10p dense case
# high frequency 
par(mfrow=c(2,5))

cci_10pdense %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
cci_10pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-10p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_10pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-10p-dense", face = "bold", size = 18, family = "Palatino"))

```

## 5P sparse - LC

```{r}
#| fig-width: 10
#| fig-height: 5

## CCD 5p sparse LV case
# high frequency
par(mfrow=c(2,5))
mat_5pLVsparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
mat_5pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-5p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_5pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-5p-LV-sparse", face = "bold", size = 18, family = "Palatino"))


# high frequency
par(mfrow=c(2,5))

fci_5pLVsparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
fci_5pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_5pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))



## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_5pLVsparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
cci_5pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-5p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_5pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-5p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

```

## 5P dense - LC

```{r}
#| fig-width: 10
#| fig-height: 5

## CCD 5p dense LV case
# high frequency
par(mfrow=c(2,5))
mat_5pLVdense %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
mat_5pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_5pdenseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-5p-LV-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_5pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-5p-LV-dense", face = "bold", size = 18, family = "Palatino"))


# high frequency
par(mfrow=c(2,5))

fci_5pLVdense %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
fci_5pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_5pdenseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-5p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_5pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-5p-dense", face = "bold", size = 18, family = "Palatino"))


## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_5pLVdense %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
cci_5pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_5pdenseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-5p-LV-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_5pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-5p-LV-dense", face = "bold", size = 18, family = "Palatino"))

```

## 10P sparse - LC

```{r}
#| fig-width: 14
#| fig-height: 7

## CCD 10p sparse LV case
# high frequency
par(mfrow=c(2,5))
mat_10pLVsparse %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
mat_10pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_10psparseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-10p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_10pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-10p-LV-sparse", face = "bold", size = 18, family = "Palatino"))


# high frequency
par(mfrow=c(2,5))

fci_10pLVsparse %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
fci_10pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_10psparseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_10pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))


## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_10pLVsparse %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
cci_10pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_10psparseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-10p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_10pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-10p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

```

## 10P dense - LC

```{r}
#| fig-width: 14
#| fig-height: 7

## CCD 10p dense LV case
# high frequency
par(mfrow=c(2,5))
mat_10pLVdense %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
mat_10pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_10pdenseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-10p-LV-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_10pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-10p-LV-dense", face = "bold", size = 18, family = "Palatino"))


# high frequency
par(mfrow=c(2,5))

fci_10pLVdense %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
fci_10pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_10pdenseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-10p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_10pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-10p-dense", face = "bold", size = 18, family = "Palatino"))


## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_10pLVdense %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
cci_10pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_10pdenseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-10p-LV-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_10pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-10p-LV-dense", face = "bold", size = 18, family = "Palatino"))

```
:::

<hr>

# Performance Evalulation per Condition

Here, we summarize the performance of the algorithms across all conditions using the evaluation metrics: structural Hamming distance (SHD), precision, recall, and uncertainty. Each point represents the average value of each metric across 500 simulations and shaded area represents interquartile range (IQR).

```{r}
#| fig-width: 10
#| fig-hight: 8
#| 
## ============================
## Create neat dataframe
## ============================

## Compute average precision & recall and corresponding sd for each condition
pre_rec <- list(
  # put all the results together in a list
  res_ccd5psparse, res_fci5psparse, res_cci5psparse, res_ccd10psparse, res_fci10psparse, res_cci10psparse, res_ccd5pdense, res_fci5pdense, res_cci5pdense, res_ccd10pdense, res_fci10pdense, res_cci10pdense, res_ccd5pLVsparse, res_fci5pLVsparse, res_cci5pLVsparse, res_ccd5pLVdense, res_fci5pLVdense, res_cci5pLVdense, res_ccd10pLVsparse, res_fci10pLVsparse, res_cci10pLVsparse, res_ccd10pdense,  res_fci10pLVdense, res_cci10pLVdense
) %>% 
  # transpose df
  map(~ sjmisc::rotate_df(.x) %>%
        # add sample size (N) info
        rename_with(~paste0(.x, "N = ", rep(N, each=8)))  %>%
        # think about how to deal with NAs or do I want to define sth. else instead of NAs.
        # na.omit(.x) %>% 
        # get the average and sd
        dplyr::summarise(across(everything(.), list(mean = ~mean(., na.rm=T), sd = ~sd(., na.rm=T))))) %>% 
  bind_rows() %>% 
  mutate(algorithm = rep(c("CCD", "FCI", "CCI"), 8),
         condition = rep(c("5p_sparse", "10p_sparse", "5p_dense", "10p_dense", "5p_LVsparse", "5p_LVdense", "10p_LVsparse", "10p_LVdense"), each=3),
         netsize = stringr::str_split(condition, "_", simplify=T)[,1],
         latentvar = ifelse(stringr::str_detect(condition, "LV")==TRUE, "with LC", "without LC"),
         densities = stringr::str_remove(stringr::str_split(condition, "_", simplify=T)[,2], "LV")
  ) %>%
  # brings the algorithm and condition names first
  relocate(where(is.character), .before = where(is.numeric)) %>% 
  # convert it to a long format
  tidyr::pivot_longer(!c(algorithm, condition, netsize, latentvar, densities), names_to = "metric", values_to = "value") %>% 
  # Add sample size column (N) & clean up the column name 
  mutate(N = stringr::str_extract(metric, "(?<=[N =])\\d+"),
         metric = stringr::str_replace_all(metric, "[0-9.]+|[N =]", "")) 


## Compute average uncertainty rate and corresponding sd for each condition
uncertainties <- bind_rows(
  # bind all results from each condition
  "CCD_5p-sparse" = uncer_ccd5psparse, "FCI_5p-sparse" = uncer_fci5psparse, "CCI_5p-sparse"=uncer_cci5psparse, "CCD_10p-sparse"=uncer_ccd10psparse, "FCI_10p-sparse" = uncer_fci10psparse, "CCI_10p-sparse" = uncer_cci10psparse, "CCD_5p-dense"=uncer_ccd5pdense, "FCI_5p-dense"=uncer_fci5pdense, "CCI_5p-dense"=uncer_cci5pdense, "CCD_10p-dense"=uncer_ccd10pdense, "FCI_10p-dense"=uncer_fci10pdense, "CCI_10p-dense"=uncer_cci10pdense, "CCD_5p-LVsparse"=uncer_ccd5pLVsparse, "FCI_5p-LVsparse"=uncer_fci5pLVsparse, "CCI_5p-LVsparse"=uncer_cci5pLVsparse, "CCD_10p-LVsparse"=uncer_ccd10pLVsparse, "FCI_10p-LVsparse"=uncer_fci10pLVsparse, "CCI_10p-LVsparse"=uncer_cci10pLVsparse,
  "CCD_5p-LVdense"=uncer_ccd5pLVdense, "FCI_5p-LVdense"=uncer_fci5pLVdense, "CCI_5p-LVdense"=uncer_cci5pLVdense, "CCD_10p-LVdense"=uncer_ccd10pLVdense, "FCI_10p-LVdense"=uncer_fci10pLVdense, "CCI_10p-LVdense"=uncer_cci10pLVdense, .id="id"
) %>% 
  group_by(id) %>% 
  # get the average and sd
  summarise_all(list(means = mean, sds = sd)) %>%  
  mutate(algorithm = stringr::str_split(id, "_", simplify = T)[,1],
         condition = stringr::str_split(id, "_", simplify = T)[,2],
         netsize = stringr::str_split(condition, "-", simplify=T)[,1],
         latentvar = ifelse(stringr::str_detect(condition, "LV")==TRUE, "with LC", "without LC"),
         densities = stringr::str_remove(stringr::str_split(condition, "-", simplify=T)[,2], "LV")
  ) %>% 
  tidyr::pivot_longer(!c(algorithm, condition, id, netsize, latentvar, densities), names_to = "name", values_to = "value") %>% 
  mutate(N = stringr::str_extract(stringr::str_split(name, "_", simplify = T)[,1], "(\\d)+"),
         statistics = stringr::str_split(name, "_", simplify = T)[,2]) %>% 
  dplyr::select(-id, -name) %>%  relocate(where(is.character), .before = where(is.numeric))


## Compute average SHD values and corresponding sd for each condition
SHDs <- bind_rows(
  # bind all results from each condition
  "CCD_5p-sparse" = SHD_ccd5psparse, "FCI_5p-sparse" = SHD_fci5psparse, "CCI_5p-sparse"=SHD_cci5psparse, "CCD_10p-sparse"= SHD_ccd10psparse, "FCI_10p-sparse" = SHD_fci10psparse, "CCI_10p-sparse" = SHD_cci10psparse, "CCD_5p-dense"= SHD_ccd5pdense, "FCI_5p-dense"=SHD_fci5pdense, "CCI_5p-dense"=SHD_cci5pdense, "CCD_10p-dense"= SHD_ccd10pdense, "FCI_10p-dense"=SHD_fci10pdense, "CCI_10p-dense"=SHD_cci10pdense, "CCD_5p-LVsparse"=SHD_ccd5pLVsparse, "FCI_5p-LVsparse"=SHD_fci5pLVsparse, "CCI_5p-LVsparse"=SHD_cci5pLVsparse, "CCD_10p-LVsparse"=SHD_ccd10pLVsparse, "FCI_10p-LVsparse"=SHD_fci10pLVsparse, "CCI_10p-LVsparse"=SHD_cci10pLVsparse, 
  "CCD_5p-LVdense"=SHD_ccd5pLVdense, "FCI_5p-LVdense"=SHD_fci5pLVdense, "CCI_5p-LVdense"=SHD_cci5pLVdense, "CCD_10p-LVdense"=SHD_ccd10pLVdense, "FCI_10p-LVdense"=SHD_fci10pLVdense, "CCI_10p-LVdense"=SHD_cci10pLVdense, .id="id"
) %>% 
  group_by(id) %>% 
  # get the average and sd
  summarise_all(list(means = mean, sds = sd)) %>%  
  mutate(algorithm = stringr::str_split(id, "_", simplify = T)[,1],
         condition = stringr::str_split(id, "_", simplify = T)[,2],
         netsize = stringr::str_split(condition, "-", simplify=T)[,1],
         latentvar = ifelse(stringr::str_detect(condition, "LV")==TRUE, "with LC", "without LC"),
         densities = stringr::str_remove(stringr::str_split(condition, "-", simplify=T)[,2], "LV")
  ) %>% 
  tidyr::pivot_longer(!c(algorithm, condition, id, netsize, latentvar, densities), names_to = "name", values_to = "value") %>% 
  mutate(N = stringr::str_extract(stringr::str_split(name, "_", simplify = T)[,1], "(\\d)+"),
         statistics = stringr::str_split(name, "_", simplify = T)[,2]) %>% 
  dplyr::select(-id, -name) %>%  relocate(where(is.character), .before = where(is.numeric)) 



## ============================
## Create figures
## ============================

## specify the common figure theme
MyTheme <-  theme(plot.title = element_text(face = "bold", family = "Palatino", size = 15, hjust=0.5),
                  plot.subtitle = element_text(face = "italic", family = "Palatino", size = 15, hjust=0.5),
                  axis.text=element_text(face = "bold",family = "Palatino", size = 11),
                  axis.text.x = element_text(angle = 45, hjust = 1.2, vjust =1.2),
                  axis.title = element_text(face = "bold",family = "Palatino", size = 12),
                  legend.text = element_text(face = "bold", family = "Palatino", size = 12),
                  legend.position="bottom",
                  strip.text = element_text(face="bold", size=13, family = "Palatino"),
                  strip.background = element_rect(fill="#f0f0f0", linetype = "solid", color="gray"),
                  strip.placement = "outside",
                  panel.border = element_rect(color = "#DCDCDC", fill = NA),
                  panel.spacing.y = unit(4, "mm")
)


## SHD figure
SHDs %>%
  tidyr::pivot_wider(names_from = statistics, values_from=value) %>% 
  ggplot(aes(x= as.numeric(N), y=means, group = algorithm, colour = algorithm, fill = algorithm)) +
  # add line plots
  geom_line(aes(group = algorithm)) +
  # add scattered points
  geom_point(size=1) + 
  # add interquartile range (IQR)
  geom_ribbon(aes(ymin=means+qnorm(0.25)*sds, ymax=means+qnorm(0.75)*sds), alpha=0.15, color=NA) +
  # specify custom colors
  scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  scale_fill_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  labs(x="N", y="", title = "") +
  # apply the theme
  theme_minimal() +
  MyTheme + 
  # create a facet
  ggh4x::facet_nested(factor(netsize, levels = c("5p", "10p"), labels = c("p = 5", "p = 10")) ~ factor(latentvar, levels = c("without LC", "with LC")) + factor(densities, levels=c("sparse", "dense")),  scales = "free_y", switch="y") +
  scale_x_continuous(breaks=c(50, 2500, 5000, 7500, 10000)) +
  ggtitle("SHD") 

## Precision figure
pre_rec %>% 
  filter(grepl("average_precision", metric)) %>% 
  tidyr::pivot_wider(names_from = metric, values_from=value) %>% 
  ggplot(aes(x= as.numeric(N), y=average_precision_mean, group = algorithm, colour = algorithm, fill=algorithm)) +
  # add line plots
  geom_line(aes(group = algorithm)) +
  # add scattered points
  geom_point(size=1) +
  # add interquartile range (IQR)
  geom_ribbon(aes(ymin=average_precision_mean+qnorm(0.25)*average_precision_sd, ymax=average_precision_mean+qnorm(0.75)*average_precision_sd), alpha=0.15, color=NA) +
  # specify custom colors
  scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  scale_fill_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  # apply the theme
  theme_minimal() +
  MyTheme + 
  # create a facet
  ggh4x::facet_nested(factor(netsize, levels = c("5p", "10p"), labels=c("p = 5", "p = 10")) ~ factor(latentvar, levels = c("without LC", "with LC")) + factor(densities, levels=c("sparse", "dense")),  switch="y") +
  scale_x_continuous(breaks=c(50, 2500, 5000, 7500, 10000)) +
  labs(title = "Precision", x = "", y = "")

## Recall figure
pre_rec %>% 
  filter(grepl("average_recall", metric)) %>% 
  tidyr::pivot_wider(names_from = metric, values_from=value) %>% 
  ggplot(aes(x= as.numeric(N), y=average_recall_mean, group = algorithm, colour = algorithm, fill= algorithm)) +
  # add line plots
  geom_line(aes(group = algorithm)) +
  # add scattered points
  geom_point(size=1) +
  # add interquartile range (IQR)
  geom_ribbon(aes(ymin=average_recall_mean+qnorm(0.25)*average_recall_sd, ymax=average_recall_mean+qnorm(0.75)*average_recall_sd), alpha=0.15, color=NA) +
  # specify custom colors
  scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  scale_fill_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  # apply the theme
  theme_minimal() +
  MyTheme + 
  # create a facet
  ggh4x::facet_nested(factor(netsize, levels = c("5p", "10p"), labels=c("p = 5", "p = 10")) ~ factor(latentvar, levels = c("without LC", "with LC")) + factor(densities, levels=c("sparse", "dense")),  switch="y") +
  scale_x_continuous(breaks=c(50, 2500, 5000, 7500, 10000)) +
  labs(title = "Recall", x = "", y = "")

## Uncertainty figure
uncertainties %>%
  tidyr::pivot_wider(names_from = statistics, values_from=value) %>% 
  ggplot(aes(x= as.numeric(N), y=means, group = algorithm, colour = algorithm, fill = algorithm)) +
  # add line plots
  geom_line(aes(group = algorithm)) +
  # add scattered points
  geom_point(size=1) + 
  # add interquartile range (IQR)
  geom_ribbon(aes(ymin=means+qnorm(0.25)*sds, ymax=means+qnorm(0.75)*sds), alpha=0.15, color=NA) +
  # specify custom colors
  scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  scale_fill_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  labs(x="N", y="", title = "") +
  # apply the theme
  theme_minimal() +
  MyTheme + 
  # create a facet
  ggh4x::facet_nested(factor(netsize, levels = c("5p", "10p"), labels=c("p = 5", "p = 10")) ~ factor(latentvar, levels = c("without LC", "with LC")) + factor(densities, levels=c("sparse", "dense")),  scales = "free_y", switch="y") +
  scale_x_continuous(breaks=c(50, 2500, 5000, 7500, 10000)) +
  ggtitle("Uncertainty")

```

<hr>

# Algorithm Running Time Analysis

The figure below displays the running time of the three algorithms for every simulated condition, with time expressed in $log(ms)$.

Based on the figure, we can observe that:

-   CCD is the most stable algorithm, with its running time mostly unaffected by model size.
-   FCI and CCI show dependence on the model size, as they take significantly more time for larger models (10-variable models) compared to smaller models (5-variable models).
-   While CCD takes the longest for relatively small models, FCI and CCI require much more time than CCD for larger models.
-   In general, CCI takes longer time than FCI, which is expected since CCI has longer and more complex orientation rules compared to FCI.

```{r}
#| label: running-time
#| fig-width: 8
#| fig-hight: 9

## Load results of algorithm running time
load("../    simulation/data/fixedB_n500/algo_runningtime.RData")

## Plot the result
times %>%
  ggplot(aes(x=factor(condition, levels= c("5psparse", "5pdense", "10psparse", "10pdense", 
                                           "5pLVsparse","5pLVdense", "10pLVsparse","10pLVdense")), 
             y = log(time), col= factor(algorithm))) +
  geom_boxplot(position = "dodge", outlier.size = 0.8, outlier.alpha = 0.2) + 
  scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  labs(y = " log(ms)", x = "conditions", title = "Algorithm Running Time", 
       subtitle = "Time in milliseconds (ms)") +
  scale_x_discrete(labels=c("5p sparse", "5p dense", "10p sparse", "10p dense", 
                            "5p sparse LC","5p dense LC", "10p sparse LC","10p dense LC")) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 25, face = "bold", margin = margin(t = 13)),
        plot.title = element_text(face = "bold", family = "Palatino", size = 15),
        plot.subtitle = element_text(face = "italic", family = "Palatino", size = 15),
        axis.text=element_text(face = "bold",family = "Palatino", size = 11),
        axis.title = element_text(face = "bold",family = "Palatino", size = 12),
        legend.text = element_text(face = "bold", family = "Palatino", size = 12),
        legend.position="bottom") 
```

<hr>

# Empirical Analysis (extra)

We estimated partial ancestral graphs (PAGs) using the same empirical data from @mcnally_co-morbid_2017 as those employed in the original paper. Since we only used the depression symptoms in the original analysis, here we attempt to extend it and apply the algorithms to the entire dataset, including the OCD symptoms. For this analysis, we use the algorithms implemented in the `TETRAD` software [@ramsey2018tetrad], excluding the CCI algorithm, which is not yet available in `TETRAD`.[^1]\
In addition, instead of using Fisher's Z transformation, which relies on Gaussian-distributed data assumption, we chose to use Chi-square based discrete type conditional independence (CI) tests. Below, we begin by presenting a summary of the entire dataset, followed by the estimated PAGs, which can be found in @fig-9, @fig-10, and @fig-11.

[^1]: In the original analyses, we used the `R` package `pcalg` [@pcalg] and `CCI`[@strobl2019].


## Data summary
```{r}
#| label: empirical-data
#| output: true

# empirical data 408 rows by 26 columns (p = 26)
mcnally <- read.csv("../   empirical_example/data/McNally.csv") 
# check the data
skimr::skim(mcnally)
# separate dep / ocd symptoms
depression <- mcnally[,1:16]
ocd <- mcnally[,17:26]
```

***Note***. The abbreviation of the variable names is explained in the footnote.[^2]

[^2]:
    -   OCD symptoms: (1) obtime (time consumed by obsessions); (2) obinterfer (interference due to obsessions); (3) obdistress (distress caused by obsessions); (4) obresist (difficulty resisting obsessions); (5) obcontrol (difficulty controlling obsessions); (6) comptime (time consumed by compulsions); (7) compinterf(interference due to compulsions); (8) compdis (distress caused by compulsions); (9) compresis (difficulty resisting compulsions); and (10) compcont (difficulty controlling compulsions).
    -   Depression symptoms: (1) onset(sleep-onset insomnia); (2) middle (difficulty falling back asleep in the middle of the night); (3) late (early morning awakening); (4) hypersom (hypersomnia); (5)sad (sadness); (6) decappetite (decreased appetite); (7)incappetite (increased appetite); (8) weightloss (weight loss, within the last 2 weeks); (9) weightgain (weight gain, within the last 2 weeks); (10) concen (concentration/decision-making impairment); (11) guilt (guilt and self-blame); (12) suicide (suicidal thoughts, plans or attempts); (13) anhedonia; (14) fatigue; (15) retard (psychomotor retardation); and (16) agitation.

## Results

From @fig-9 and @fig-10, we can see two distinct clusters of depression and OCD symptoms. Consistent with the findings in the original analysis, the FCI PAG tends to contain more circle endpoints than the CCD PAG, as FCI accounts for latent confounding. In addition, the PAG for OCD symptoms exhibit a more active causal dynamic in general compared to the PAG for depression symptoms, which is evident from the dense network structure, as shown in @fig-11.

> Note that the dash-outlined nodes and (blue) colored nodes indicate the dotted-underlining and solid-underlining, respectively, in the CCD PAG. However, this underlining information is disregarded in this analysis.

```{r}
#| label: running-algo-emp
#| message: false
#| results: hide

## run ccd algorithm on entire mcnally (discrete)
ccd_mcnally <- ccdKP(df=mcnally, dataType = "discrete", alpha = 0.01) 
matccd_mcnally <- CreateAdjMat(ccd_mcnally, p = 26)

## run fci algorithm on entire mcnally (discrete)
fci_mcnally <- tetradrunner(algoId = 'fci', df = mcnally,
dataType = 'discrete', alpha = 0.01)
matfci_mcnally <- CreateAdjMat(fci_mcnally, p = ncol(mcnally))

## run ccd on depression symptoms
ccd_mcnally_dep <- ccdKP(df=depression, dataType = "discrete", alpha = 0.01) 
mat_mcnally_dep <- CreateAdjMat(ccd_mcnally_dep, p = ncol(depression))

## run fci on depression symptoms
fci_mcdep <- tetradrunner(algoId = 'fci', df = depression,
dataType = 'discrete', alpha = 0.01)
matfci_mcdep <- CreateAdjMat(fci_mcdep, p = ncol(depression))

## run ccd on ocd symptoms
ccd_mcnally_ocd <- ccdKP(df=ocd, dataType = "discrete", alpha = 0.01) 
mat_mcnally_ocd <- CreateAdjMat(ccd_mcnally_ocd, p = ncol(ocd))

## run fci on ocd symptoms
fci_mcocd <- tetradrunner(algoId = 'fci', df = ocd,
dataType = 'discrete', alpha = 0.01)
matfci_mcocd <- CreateAdjMat(fci_mcocd, p = ncol(ocd))
```

```{r}
#| label: fig-9
#| results: hide
#| fig-width: 12
#| fig-cap: CCD PAG on entire McNally data

## CCD PAG for the entire Mcnally
plotPAG(ccd_mcnally, matccd_mcnally) 
```

```{r}
#| label: fig-10
#| results: hide
#| fig-width: 12
#| fig-cap: FCI PAG on entire McNally data

## FCI PAG for the entire Mcnally
plotPAG(fci_mcnally, matfci_mcnally) 
```

```{r}
#| label: fig-11
#| results: hide
#| layout-ncol: 2
#| fig-cap: Separate PAGs on depression and OCD symptoms
#| fig-subcap: 
#|   - "CCD PAG_depression symptoms"
#|   - "FCI PAG_depression symptoms"
#|   - "CCD PAG_OCD symptoms"
#|   - "FCI PAG_OCD symptoms"

## CCD PAG for the depression symptoms
plotPAG(ccd_mcnally_dep, mat_mcnally_dep) 

## FCI PAG for the depression symptoms
plotPAG(fci_mcdep, matfci_mcdep)

## CCD PAG for the ocd symptoms
plotPAG(ccd_mcnally_ocd, mat_mcnally_ocd) 

## FCI PAG for the ocd symptoms
plotPAG(fci_mcocd, matfci_mcocd)
```

<hr>

# References

::: {#refs}
:::

<hr>

# Session Information

```{r}
#| code-fold: false
#| output: true

sessionInfo()
```
