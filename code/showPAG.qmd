---
title: "showPAG"
author: "Kyuri Park"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format: 
  html:
    theme: Yeti
    toc: true
    smooth-scroll: true
    number-sections: true
    code-fold: true
    #include-after-body: graph_fold.html
    code-overflow: scroll
    code-summary: "See code here."
    embed-resources: true
    highlight: tango
    fig-responsive: true
    code-block-bg: rgba(233,236,239,.65)
editor: visual

execute:
    warning: false
    message: false
---


```{r setup}
#| include: false
#| results: hide
#| fig-show: hide

# chunk settings
knitr::opts_chunk$set(
   message = FALSE,
   warning = FALSE,
   comment = NA,
   fig.align = "center",
   results = "hide")

# suppress ggplot warnings
options(warn = -1) 


## load functions & packages
source("R/CCD_fnc.R")
source("R/plot_fnc.R")
source("R/data_generating_fnc.R")
source("eval_metrics.R")
source("true_ancestral.R")

library(magrittr)
library(purrr)
library(furrr)
library(dplyr)
library(qgraph)
library(ggplot2)
library(ggpubr)

## slightly modified CCI package
#install_github("KyuriP/CCI_KP")
library(CCI.KP)

# set the seed
set.seed(123)

plan(multisession) 
```


## 5p_sparse
```{r}
#|label: 5psparse

## simulate data 1000 times ## 

## ====================
## 5p - sparse
## ====================

# specify B matrix

B5sparse = matrix(c(0, 0, 0, 0, 0,
                 1, 0, 0.8, 0, 0,
                 0, 0, 0, 0.9, 0,
                 0, 0.7, 0, 0, 1.5,
                 0, 0, 0, 0, 0), 5, 5, byrow = T)


colnames(B5sparse) <- c("X1", "X2", "X3", "X4", "X5")

# specify layout
layout5 = matrix(c(0,1,
                   0,0,
                   1,-1,
                   2,0,
                   2,1),5,2,byrow = T)
par(mfrow=c(1,2))
true5psparse <- qgraph(t(B5sparse), layout=layout5, labels = colnames(B5sparse), theme="colorblind")

## Data generating
# equilibrium check
equilibrium_check(B5sparse)

# generate data 
# specify the sample sizes
N <- c(50, 150, 500, 1000, 1500, 2000, 2500, 3000, 4000, 5000)
# specify replication number
n <- 10


simdata_5psparse <- N %>% future_map(function(z) {
  # later increase n again to 1000 or sth
  replicate(n = n,
            expr = gen_dat(B5sparse, N = z),  
            simplify = FALSE)
}, .options = furrr_options(seed=123))


## True Ancestral Graph
dcg_5psparse <- matrix(c(0,1,0,0,0,
                         0,0,0,1,0,
                         0,1,0,0,0,
                         0,0,1,0,0,
                         0,0,0,1,0), 5,5,byrow=T)
trueag_5psparse <- true_ancestral(dcg_5psparse, gen_dat(B5sparse), gaussCItest)
dimnames(trueag_5psparse) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))
plotAG(trueag_5psparse)

# Run CCD algorithm
ccd_5psparse <- simdata_5psparse %>%
  map_depth(2, ~ ccdKP(df = .x, dataType = "continuous", alpha = 0.05)
      )
mat_5psparse <- ccd_5psparse %>% 
  map_depth(2, ~CreateAdjMat(.x, length(.x$nodes)))


######### CCD object is not intact when saving'em as .Rdata    :/ :/ :/ 
# save(ccd_5psparse, file="data/ccd_5psparse.RData")
# load("data/ccd_5psparse.RData")

# can we have a more elegant way to combine "graphNEL" plots? ? ? ? ? ?? 
par(mfrow=c(2,5))
pag_ccd5psparse <- map2(ccd_5psparse, mat_5psparse,
                        ~map2(.x, .y, plotPAG)
                         ) 

# ## Run FCI algorithm
fci_5psparse <- simdata_5psparse %>%
  map_depth(2, ~fci(list(C = cor(.x), n = nrow(.x)), indepTest=gaussCItest,
           alpha = 0.05, doPdsep = TRUE, selectionBias= FALSE, labels = colnames(.x)) %>% .@amat # extract amat
      )

# save(fci_5psparse, file="data/fci_5psparse.RData")
# load("data/fci_5psparse.RData")
par(mfrow=c(2,5))
pag_fci5psparse <- fci_5psparse %>%
  map_depth(2, ~plotAG(.x))

## Run CCI algorithm
cci_5psparse <- simdata_5psparse %>%
  map_depth(2, ~cci(list(C = cor(.x), n = nrow(.x)), gaussCItest, alpha=0.05, labels = colnames(.x), p = ncol(.x)) %>% .$maag  # convert some logical matrix (0, 1 only) to a numeric matrix while keeping a matrix format (lost the row names but they are not needed)
      )

# save(cci_5psparse, file="data/cci_5psparse.RData")
# load("data/cci_5psparse.RData")
par(mfrow=c(2,5))
pag_cci5psparse <- cci_5psparse %>%
  map_depth(2, ~plotAG(.x))



## evaluation 
# CCD
res_ccd5psparse <- mat_5psparse %>% 
  map_depth(2, ~precision_recall(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 
# UNCERTAINTY
uncer_ccd5psparse <- mat_5psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% do.call("cbind", .) %>% apply(., 2, unlist) %>%  as.data.frame %>% 
  rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_ccd5psparse, na.rm=T)

# SHD
SHD_ccd5psparse <- mat_5psparse %>% 
  map_depth(2, ~SHD(trueag_5psparse, .x)) %>% do.call("cbind", .) %>% apply(., 2, unlist) %>%  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_ccd5psparse)

# FCI
res_fci5psparse <- fci_5psparse %>% 
  map_depth(2, ~precision_recall(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_fci5psparse <- fci_5psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_fci5psparse, na.rm=T)

# SHD
SHD_fci5psparse <- fci_5psparse %>% 
  map_depth(2, ~SHD(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_fci5psparse)

# CCI
res_cci5psparse <- cci_5psparse %>% 
  map_depth(2, ~precision_recall(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_cci5psparse <- cci_5psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_cci5psparse)

# SHD
SHD_cci5psparse <- cci_5psparse %>% 
  map_depth(2, ~SHD(trueag_5psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_cci5psparse)

```


## 5p_dense

```{r}
#|label: 5pdense

## ====================
## 5p - dense
## ====================
# specify B matrix

B5dense = matrix(c(0, 0, 0, 0, 0,
                    1, 0, 0.8, 0, 0,
                    0, 0, 0, 0.9, 0,
                    0, 0.7, 0, 0, 1.5,
                    1, 0, 0, 0, 0), 5, 5, byrow = T)

colnames(B5dense) <- c("X1", "X2", "X3", "X4", "X5")

par(mfrow=c(1,2))
true5pdense <- qgraph(t(B5dense), layout=layout5, labels = colnames(B5dense), theme="colorblind")

## Data generating
# equilibrium check
equilibrium_check(B5dense)

# generate data (sample size as specified above)
simdata_5pdense <- N %>% future_map(function(z) {
  replicate(n = n,
            expr = gen_dat(B5dense, N = z),  
            simplify = FALSE)
}, .options = furrr_options(seed=123))


# True Ancestral Graph
dcg_5pdense <- matrix(c(0,1,0,0,1,
                        0,0,0,1,0,
                        0,1,0,0,0,
                        0,0,1,0,0,
                        0,0,0,1,0), 5,5,byrow=T)

trueag_5pdense <- true_ancestral(dcg_5pdense, gen_dat(B5dense), gaussCItest)
dimnames(trueag_5pdense) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))
plotAG(trueag_5pdense)


## Run CCD algorithm
ccd_5pdense <- simdata_5pdense %>%
  map_depth(2, ~ ccdKP(df = .x, dataType = "continuous", alpha = 0.05)
  )
mat_5pdense <- ccd_5pdense %>% 
  map_depth(2, ~CreateAdjMat(.x, length(.x$nodes)))

# save(ccd_5pdense, file="data/ccd_5pdense.RData")
# load("data/ccd_5pdense.RData")
par(mfrow=c(2,5))
pag_ccd5pdense <- map2(ccd_5pdense, mat_5pdense,
                        ~map2(.x, .y, plotPAG)
                         )


## Run FCI algorithm
fci_5pdense <- simdata_5pdense %>%
  map_depth(2, ~fci(list(C = cor(.x), n = nrow(.x)), indepTest=gaussCItest,
           alpha = 0.05, doPdsep = TRUE, selectionBias= FALSE, labels = colnames(.x)) %>% .@amat # extract amat
  )

# save(fci_5pdense, file="data/fci_5pdense.RData")
# load("data/fci_5pdense.RData")

par(mfrow=c(2,5))
pag_fci5pdense <- fci_5pdense %>%
  map_depth(2, ~plotAG(.x))

## Run CCI algorithm
cci_5pdense <- simdata_5pdense %>%
  map_depth(2, ~cci(list(C = cor(.x), n = nrow(.x)), gaussCItest, alpha=0.05, labels = colnames(.x), p = ncol(.x)) %>% .$maag  # convert some logical matrix (0, 1 only) to a numeric matrix while keeping a matrix format (lost the row names but they are not needed)
  )

# save(cci_5pdense, file="data/cci_5pdense.RData")
# load("data/cci_5pdense.RData")
par(mfrow=c(2,5))
pag_cci5pdense <- cci_5pdense %>%
  map_depth(2, ~plotAG(.x))


## evaluation
# CCD
res_ccd5pdense <- mat_5pdense %>% 
  map_depth(2, ~precision_recall(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame()

# UNCERTAINTY
uncer_ccd5pdense <- mat_5pdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

colMeans(uncer_ccd5pdense, na.rm=T)

# SHD
SHD_ccd5pdense <- mat_5pdense %>% 
  map_depth(2, ~SHD(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

colMeans(SHD_ccd5pdense)

# FCI
res_fci5pdense <- fci_5pdense %>% 
  map_depth(2, ~precision_recall(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_fci5pdense <- fci_5pdense%>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

colMeans(uncer_fci5pdense, na.rm=T)

# SHD
SHD_fci5pdense <- fci_5pdense %>% 
  map_depth(2, ~SHD(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

colMeans(SHD_fci5pdense)

# CCI
res_cci5pdense <- cci_5pdense %>% 
  map_depth(2, ~precision_recall(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY 
uncer_cci5pdense <- cci_5pdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

colMeans(uncer_cci5pdense)

# SHD
SHD_cci5pdense <- cci_5pdense %>% 
  map_depth(2, ~SHD(trueag_5pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

colMeans(SHD_cci5pdense)
```



## 10p_sparse
```{r}
#| label: 10psparse

## ====================
## 10p - sparse
## ====================

# B10sparse = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
#                   0.4, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 
#                   0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 
#                   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
#                   0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 
#                   0, 0, 0, 0, 0, 0, 0, 1, 0.8, 0, 
#                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
#                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4, 
#                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 10, 10, byrow = T)


B10sparse = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0.8, 0, 0, 0, 0, 0, 0, 0, 
                  0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                  0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 
                  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                  0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 
                  0, 0, 0, 0, 0, 0, 0, 0, 0.8, 0, 
                  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 10, 10, byrow = T)

dimnames(B10sparse) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))

# specify layout
layout10 = matrix(c(0,1,
                      2,1,
                      1,0,
                      2,-1,
                      3,0,
                      4, -1,
                      5, 0,
                      6, -1,
                      4, 1,
                      7, 1),10,2,byrow = T)
par(mfrow=c(1,2))
true10psparse <- qgraph(t(B10sparse), layout = layout10, labels = colnames(B10sparse), theme="colorblind")

## Data generating
# equilibrium check
equilibrium_check(B10sparse)

# generate data (sample size as specified above)
simdata_10psparse <- N %>% future_map(function(z) {
  replicate(n = n,
            expr = gen_dat(B10sparse, N = z),  
            simplify = FALSE)
}, .options = furrr_options(seed=123))

## True Ancestral Graph
# dcg_10psparse <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#                           0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
#                           0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
#                           0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
#                           0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
#                           0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
#                           0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
#                           0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
#                           0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
#                           0, 0, 0, 0, 0, 0, 0, 0, 1, 0), 10, 10, byrow = T)

dcg_10psparse <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                          0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
                          0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                          0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                          0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                          0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                          0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                          0, 0, 0, 0, 0, 0, 0, 0, 1, 0), 10, 10, byrow = T)

trueag_10psparse <- true_ancestral(dcg_10psparse, gen_dat(B10sparse), gaussCItest)
dimnames(trueag_10psparse) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))
plotAG(trueag_10psparse)


## Run CCD algorithm
ccd_10psparse <- simdata_10psparse %>%
  map_depth(2, ~ ccdKP(df = .x, dataType = "continuous", alpha = 0.05)
  )

mat_10psparse <- ccd_10psparse %>% 
  map_depth(2, ~CreateAdjMat(.x, length(.x$nodes)))

# save(ccd_10psparse, file="data/ccd_10psparse.RData")
# load("data/ccd_10psparse.RData")
par(mfrow=c(2,5))
pag_ccd10psparse <- map2(ccd_10psparse, mat_10psparse,
                        ~map2(.x, .y, plotPAG)
                         )

## Run FCI algorithm
fci_10psparse <- simdata_10psparse %>%
  map_depth(2, ~fci(list(C = cor(.x), n = nrow(.x)), indepTest=gaussCItest,
           alpha = 0.05, doPdsep = TRUE, selectionBias= FALSE, labels = colnames(.x)) %>% .@amat # exxtract amat
  )

# save(fci_10psparse, file="data/fci_10psparse.RData")
# load("data/fci_10psparse.RData")
par(mfrow=c(2,5))
pag_fci10psparse <- fci_10psparse %>%
  map_depth(2, ~plotAG(.x))

## Run CCI algorithm
cci_10psparse <- simdata_10psparse %>%
  map_depth(2, ~cci(list(C = cor(.x), n = nrow(.x)), gaussCItest, alpha=0.05, labels = colnames(.x), p = ncol(.x)) %>% .$maag  # convert some logical matrix (0, 1 only) to a numeric matrix while keeping a matrix format (lost the row names but they are not needed)
  )

# save(cci_10psparse, file="data/cci_10psparse.RData")
# load("data/cci_10psparse.RData")
par(mfrow=c(2,5))
pag_cci10psparse <- cci_10psparse %>%
  map_depth(2, ~plotAG(.x))



## evaluation
# CCD
res_ccd10psparse <- mat_10psparse %>% 
  map_depth(2, 
  ~precision_recall(trueag_10psparse, .x)) %>%
  do.call("cbind", .) %>% t() %>%  
  apply(., 2, unlist) %>%  as.data.frame()
  

# UNCERTAINTY
uncer_ccd10psparse <- mat_10psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_ccd10psparse, na.rm=T)

# SHD
SHD_ccd10psparse <- mat_10psparse %>% 
  map_depth(2, ~SHD(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_ccd10psparse)

# FCI
res_fci10psparse <- fci_10psparse %>% 
  map_depth(2, ~precision_recall(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_fci10psparse <- fci_10psparse%>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

colMeans(uncer_fci10psparse, na.rm=T)

# SHD
SHD_fci10psparse <- fci_10psparse %>% 
  map_depth(2, ~SHD(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))

colMeans(SHD_fci10psparse)

# CCI
res_cci10psparse <- cci_10psparse %>% 
  map_depth(2, ~precision_recall(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_cci10psparse <- cci_10psparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_cci10psparse, na.rm=T)

# SHD
SHD_cci10psparse <- cci_10psparse %>% 
  map_depth(2, ~SHD(trueag_10psparse, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_cci10psparse)


```


## 10p_dense
```{r}
#| label: 10pdense

## ====================
## 10p - dense
## ====================

# B10dense = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
#                      0.4, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 
#                      0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 
#                      0, 0.4, 0, 1, 0, 0, 0, 0, 0, 0, 
#                      0, 0, 0, 0, 0.9, 0, 0.5, 0, 0, 0, 
#                      0, 0, 0, 0, 0, 0, 0, 1, 0.8, 1, 
#                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6, 
#                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4, 
#                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 10, 10, byrow = T)

B10dense = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0.8, 0, 0, 0, 0, 0, 0, 0, 
                     0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                     0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 
                     0, 0.4, 0, 1, 0, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0.9, 0, 0.5, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0.8, 1, 
                     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 10, 10, byrow = T)



colnames(B10dense) <- c(paste("X", 1:10, sep=""))

# specify layout
layout10 = matrix(c(0,1,
                    2,1,
                    1,0,
                    2,-1,
                    3,0,
                    4, -1,
                    5, 0,
                    6, -1,
                    4, 1,
                    7, 1),10,2,byrow = T)
par(mfrow=c(1,2))
true10pdense <- qgraph(t(B10dense), layout = layout10, labels = colnames(B10dense), theme="colorblind")

## Data generating
# equilibrium check
equilibrium_check(B10dense)

# generate data (sample size as specified above)
simdata_10pdense <- N %>% future_map(function(z) {
  replicate(n = n,
            expr = gen_dat(B10dense, N = z),  
            simplify = FALSE)
}, .options = furrr_options(seed=123))


## True Ancestral Graph
# dcg_10pdense <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#                          0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 
#                          0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
#                          0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
#                          0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
#                          0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
#                          0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
#                          0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
#                          0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
#                          0, 0, 0, 0, 0, 0, 1, 1, 1, 0), 10, 10, byrow = T)


dcg_10pdense <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
                         0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
                         0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                         0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                         0, 0, 0, 0, 0, 0, 1, 0, 1, 0), 10, 10, byrow = T)

trueag_10pdense <- true_ancestral(dcg_10pdense, gen_dat(B10dense), gaussCItest)
dimnames(trueag_10pdense) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))
plotAG(trueag_10pdense)


## Run CCD algorithm
ccd_10pdense <- simdata_10pdense  %>%
  map_depth(2, ~ ccdKP(df = .x, dataType = "continuous", alpha = 0.05)
  )
mat_10pdense  <- ccd_10pdense  %>% 
  map_depth(2, ~CreateAdjMat(.x, length(.x$nodes)))

# save(ccd_10pdense, file="data/ccd_10pdense.RData")
# load("data/ccd_10pdense.RData")
par(mfrow=c(2,5))
pag_ccd10pdense <- map2(ccd_10pdense, mat_10pdense,
                        ~map2(.x, .y, plotPAG)
                         )

## Run FCI algorithm
fci_10pdense <- simdata_10pdense  %>%
  map_depth(2, ~fci(list(C = cor(.x), n = nrow(.x)), indepTest=gaussCItest,
           alpha = 0.05, doPdsep = TRUE, selectionBias= FALSE, labels = colnames(.x)) %>% .@amat # exxtract amat
  )

# save(fci_10pdense, file="data/fci_10pdense.RData")
# load("data/fci_10pdense.RData")
par(mfrow=c(2,5))
pag_fci10pdense <- fci_10pdense  %>%
  map_depth(2, ~plotAG(.x))

## Run CCI algorithm
cci_10pdense  <- simdata_10pdense %>%
  map_depth(2, ~cci(list(C = cor(.x), n = nrow(.x)), gaussCItest, alpha=0.05, labels = colnames(.x), p = ncol(.x)) %>% .$maag  # convert some logical matrix (0, 1 only) to a numeric matrix while keeping a matrix format (lost the row names but they are not needed)
  )

# save(cci_10pdense, file="data/cci_10pdense.RData")
# load("data/cci_10pdense.RData")
par(mfrow=c(2,5))
pag_cci10pdense  <- cci_10pdense  %>%
  map_depth(2, ~plotAG(.x))


## evaluation
# CCD
res_ccd10pdense  <- mat_10pdense  %>% 
  map_depth(2, ~precision_recall(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_ccd10pdense  <- mat_10pdense  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_ccd10pdense , na.rm=T)

# SHD
SHD_ccd10pdense  <- mat_10pdense %>% 
  map_depth(2, ~SHD(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_ccd10pdense)

# FCI
res_fci10pdense  <- fci_10pdense  %>% 
  map_depth(2, ~precision_recall(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_fci10pdense <- fci_10pdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_fci10pdense, na.rm=T)

# SHD
SHD_fci10pdense  <- fci_10pdense %>% 
  map_depth(2, ~SHD(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_fci10pdense)

# CCI
res_cci10pdense <- cci_10pdense %>% 
  map_depth(2, ~precision_recall(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_cci10pdense <- cci_10pdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_cci10pdense, na.rm=T)

# SHD
SHD_cci10pdense <- cci_10pdense %>% 
  map_depth(2, ~SHD(trueag_10pdense, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# averae SHD
colMeans(SHD_cci10pdense)
```


## 5p_LVsparse
```{r}
#| label: 5pLVsparse

## ====================
## 5p with LV sparse
## ====================
# specify B matrix

B5_lvsparse = matrix(c(0, 0, 0, 0, 0, 1,
                 0, 0, 0.4, 0, 0, 1,
                 0, 0, 0, 0.5, 0,0,
                 0, 0.7, 0, 0, 1.5,0,
                 0, 0, 0, 0, 0,0,
                 0,0,0,0,0,0), 6, 6, byrow = T)

colnames(B5_lvsparse) <- c("X1", "X2", "X3", "X4", "X5", "L1")
# specify layout
layout5_lv = matrix(c(0,1,
                      0,0,
                      1,-1,
                      2,0,
                      2,1,
                      -1, 0.5),6,2,byrow = T)
par(mfrow=c(1,2))
true5p_lvsparse <- qgraph(t(B5_lvsparse), layout=layout5_lv, labels = colnames(B5_lvsparse), theme="colorblind")
 
# B5_lv2 = matrix(c(0, 0, 0, 0, 0, 1,
#                   0, 0, 0, 0, 0, 1,
#                   0, 0.5, 0, 0, 0.6, 0,
#                   1, 0, 0, 0, 0.5, 0,
#                   0, 0, 0, 0.5, 0,0,
#                   0,0,0,0,0,0), 6, 6, byrow = T)
# 
# colnames(B5_lv2) <- c("X1", "X2", "X3", "X4", "X5", "L1")
# # specify layout
# layout5_lv2 = matrix(c(0,1,
#                        0,0,
#                        1,0.5,
#                        2,1,
#                        2,0,
#                        -1, 0.5),6,2,byrow = T)
# 
# true5p_lv2 <- qgraph(t(B5_lv2), layout=layout5_lv2, labels = colnames(B5_lv2), theme="colorblind")

## Data generating
# equilibrium check
equilibrium_check(B5_lvsparse)

# generate data (sample size as specified above)
simdata_5pLVsparse <- N %>% future_map(function(z) {
  replicate(n = n,
            expr = gen_dat(B5_lvsparse, N = z)[,-6],  
            simplify = FALSE)
}, .options = furrr_options(seed=123))


# # generate data and exclude the LV
# data5pLV2 <- gen_dat(B5_lv2, N =1e6, seed = 12345)[,-6]


## True Ancestral Graph
# [i,j] = [j,i] = 2: a LV exists between i and j
dcg_5psparseLV <- matrix(c(0, 2, 0, 0, 0, 
                           2, 0, 0, 1, 0, 
                           0, 1, 0, 0, 0,
                           0, 0, 1, 0, 0,
                           0, 0, 0, 1, 0), 5, 5, byrow = T)

trueag_5psparseLV <- true_ancestral(dcg_5psparseLV, gen_dat(B5_lvsparse), gaussCItest)
dimnames(trueag_5psparseLV) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))
plotAG(trueag_5psparseLV)

## Run CCD algorithm
ccd_5pLVsparse <- simdata_5pLVsparse  %>%
  map_depth(2, ~ ccdKP(df = .x, dataType = "continuous", alpha = 0.05)
  )
mat_5pLVsparse  <- ccd_5pLVsparse  %>% 
  map_depth(2, ~CreateAdjMat(.x, length(.x$nodes)))

# save(ccd_5pLVsparse, file="data/ccd_5pLVsparse.RData")
# load("data/ccd_5pLV.RData")
par(mfrow=c(2,5))
pag_ccd5pLVsparse <- map2(ccd_5pLVsparse, mat_5pLVsparse,
                        ~map2(.x, .y, plotPAG)
                         )

## Run FCI algorithm
fci_5pLVsparse <- simdata_5pLVsparse  %>%
  map_depth(2, ~fci(list(C = cor(.x), n = nrow(.x)), indepTest=gaussCItest,
           alpha = 0.05, doPdsep = TRUE, selectionBias= FALSE, labels = colnames(.x)) %>% .@amat # exxtract amat
  )

# save(fci_5pLVsparse, file="data/fci_5pLVsparse.RData")
# load("data/fci_5pLV2.RData")
par(mfrow=c(2,5))
pag_fci_5pLVsparse <- fci_5pLVsparse  %>%
  map_depth(2, ~plotAG(.x))

## Run CCI algorithm
cci_5pLVsparse  <- simdata_5pLVsparse %>%
  map_depth(2, ~cci(list(C = cor(.x), n = nrow(.x)), gaussCItest, alpha=0.05, labels = colnames(.x), p = ncol(.x)) %>% .$maag  # convert some logical matrix (0, 1 only) to a numeric matrix while keeping a matrix format (lost the row names but they are not needed)
  )
# 
# save(cci_5pLVsparse, file="data/cci_5pLVsparse.RData")
# load("data/cci_5pLV2.RData")
par(mfrow=c(2,5))
pag_cci_5pLVsparse <- cci_5pLVsparse  %>%
  map_depth(2, ~plotAG(.x))


## evaluation
# CCD
res_ccd5pLVsparse  <- mat_5pLVsparse  %>% 
  map_depth(2, ~precision_recall(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_ccd5pLVsparse  <- mat_5pLVsparse  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_ccd5pLVsparse , na.rm=T)

# SHD
SHD_ccd5pLVsparse <- mat_5pLVsparse %>% 
  map_depth(2, ~SHD(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_ccd5pLVsparse)

# FCI
res_fci5pLVsparse  <- fci_5pLVsparse  %>% 
  map_depth(2, ~precision_recall(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_fci5pLVsparse <- fci_5pLVsparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_fci5pLVsparse, na.rm=T)

# SHD
SHD_fci5pLVsparse <- fci_5pLVsparse %>% 
  map_depth(2, ~SHD(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_fci5pLVsparse)

# CCI
res_cci5pLVsparse <- cci_5pLVsparse %>% 
  map_depth(2, ~precision_recall(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_cci5pLVsparse <- cci_5pLVsparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average unceratinty
colMeans(uncer_cci5pLVsparse, na.rm=T)

# SHD
SHD_cci5pLVsparse <- cci_5pLVsparse %>% 
  map_depth(2, ~SHD(trueag_5psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_cci5pLVsparse)

```


## 5p_LVdense
```{r}
#| label: 5pLVdense

## ====================
## 5p with LV dense
## ====================
# specify B matrix

B5_lvdense = matrix(c(0, 0, 0, 0, 0, 1,
                       0, 0, 0.4, 0, 0, 1,
                       0, 0, 0, 0.5, 0,0,
                       0, 0.7, 0, 0, 1.5,0,
                       0.6, 0, 0, 0, 0,0,
                       0,0,0,0,0,0), 6, 6, byrow = T)

colnames(B5_lvdense) <- c("X1", "X2", "X3", "X4", "X5", "L1")
# specify layout
layout5_lv = matrix(c(0,1,
                      0,0,
                      1,-1,
                      2,0,
                      2,1,
                      -1, 0.5),6,2,byrow = T)

par(mfrow=c(1,2))
true5p_lvdense <- qgraph(t(B5_lvdense), layout=layout5_lv, labels = colnames(B5_lvdense), theme="colorblind")


## Data generating
# equilibrium check
equilibrium_check(B5_lvdense)

# generate data (sample size as specified above)
simdata_5pLVdense <- N %>% future_map(function(z) {
  replicate(n = n,
            expr = gen_dat(B5_lvdense, N = z)[,-6],  
            simplify = FALSE)
}, .options = furrr_options(seed=123))




## True Ancestral Graph
# [i,j] = [j,i] = 2: a LV exists between i and j
dcg_5pdenseLV <- matrix(c(0, 2, 0, 0, 1, 
                          2, 0, 0, 1, 0, 
                          0, 1, 0, 0, 0,
                          0, 0, 1, 0, 0,
                          0, 0, 0, 1, 0), 5, 5, byrow = T)

trueag_5pdenseLV <- true_ancestral(dcg_5pdenseLV, gen_dat(B5_lvdense), gaussCItest)
dimnames(trueag_5pdenseLV) <- list(paste("X", 1:5, sep=""), paste("X", 1:5, sep=""))
plotAG(trueag_5pdenseLV)


## Run CCD algorithm
ccd_5pLVdense <- simdata_5pLVdense  %>%
  map_depth(2, ~ ccdKP(df = .x, dataType = "continuous", alpha = 0.05)
  )
mat_5pLVdense  <- ccd_5pLVdense  %>% 
  map_depth(2, ~CreateAdjMat(.x, length(.x$nodes)))

# save(ccd_5pLVdense, file="data/ccd_5pLVdense.RData")
# load("data/ccd_5pLV.RData")
par(mfrow=c(2,5))
pag_ccd5pLVdense <- map2(ccd_5pLVdense, mat_5pLVdense,
                        ~map2(.x, .y, plotPAG)
                         )

## Run FCI algorithm
fci_5pLVdense <- simdata_5pLVdense  %>%
  map_depth(2, ~fci(list(C = cor(.x), n = nrow(.x)), indepTest=gaussCItest,
                    alpha = 0.05, doPdsep = TRUE, selectionBias= FALSE, labels = colnames(.x)) %>% .@amat # exxtract amat
  )
# 
# save(fci_5pLVdense, file="data/fci_5pLVdense.RData")
# load("data/fci_5pLV2.RData")
par(mfrow=c(2,5))
pag_fci5pLVdense <- fci_5pLVdense  %>%
  map_depth(2, ~plotAG(.x))

## Run CCI algorithm
cci_5pLVdense  <- simdata_5pLVdense %>%
  map_depth(2, ~cci(list(C = cor(.x), n = nrow(.x)), gaussCItest, alpha=0.05, labels = colnames(.x), p = ncol(.x)) %>% .$maag  # convert some logical matrix (0, 1 only) to a numeric matrix while keeping a matrix format (lost the row names but they are not needed)
  )
# 
# save(cci_5pLVdense, file="data/cci_5pLVdense.RData")
# load("data/cci_5pLV2.RData")
par(mfrow=c(2,5))
pag_cci_5pLVdense <- cci_5pLVdense  %>%
  map_depth(2, ~plotAG(.x))



## evaluation
# CCD
res_ccd5pLVdense  <- mat_5pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_5pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_ccd5pLVdense  <- mat_5pLVdense  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_ccd5pLVdense , na.rm=T)

# SHD
SHD_ccd5pLVdense <- mat_5pLVdense %>% 
  map_depth(2, ~SHD(trueag_5pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_ccd5pLVdense)

# FCI
res_fci5pLVdense  <- fci_5pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_5pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_fci5pLVdense <- fci_5pLVdense  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_fci5pLVdense , na.rm=T)

# SHD
SHD_fci5pLVdense  <- fci_5pLVdense  %>% 
  map_depth(2, ~SHD(trueag_5pdenseLV , .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_fci5pLVdense )

# CCI
res_cci5pLVdense  <- cci_5pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_5pdenseLV , .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_cci5pLVdense  <- cci_5pLVdense  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average unceratinty
colMeans(uncer_cci5pLVdense , na.rm=T)

# SHD
SHD_cci5pLVdense  <- cci_5pLVdense  %>% 
  map_depth(2, ~SHD(trueag_5pdenseLV , .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_cci5pLVdense )
```


## 10p_LVsparse
```{r}
#| label: 10pLVsparse

## ====================
## 10p with LV sparse
## ====================
# specify B matrix

# B10_lvsparse = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                   0.4, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                   0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 0,
#                   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#                   0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 0,
#                   0, 0, 0, 0, 0, 0, 0, 1, 0.8, 0, 0,
#                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8,
#                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4, 0,
#                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2,
#                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 11, 11, byrow = T)

## with 2 LVs
B10_lvsparse = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 0.7,
                        0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0.7,
                        0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0.8, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0.8, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 12, 12, byrow = T)



# colnames(B10_lvsparse) <- c(paste("X", 1:10, sep=""), "L1")
colnames(B10_lvsparse) <- c(paste("X", 1:10, sep=""), "L1", "L2")


# specify layout
# layout10LV = matrix(c(0,1,
#                       2,1,
#                       1,0,
#                       2,-1,
#                       3,0,
#                       4, -1,
#                       5, 0,
#                       6, -1,
#                       4, 1,
#                       7, 1,
#                       8, 0),11,2,byrow = T)

layout10LV2 = matrix(c(0, 1,
                      2, 1,
                      1, 0,
                      2, -1,
                      3, 0,
                      4, -1,
                      5, 0,
                      6, -1,
                      4, 1,
                      7, 1,
                      8, 0,
                      3, 2), 12, 2, byrow = T)

par(mfrow=c(1,2))
true10pLVsparse <- qgraph(t(B10_lvsparse), layout = layout10LV2, labels = colnames(B10_lvsparse), theme="colorblind")

## Data generating
# equilibrium check
equilibrium_check(B10_lvsparse)

# generate data (sample size as specified above)
simdata_10pLVsparse <- N %>% future_map(function(z) {
  replicate(n = n,
            expr = gen_dat(B10_lvsparse, N = z)[,-c(11,12)],  
            simplify = FALSE)
}, .options = furrr_options(seed=123))

## True Ancestral Graph
# [i,j] = [j,i] = 2: a LV exists between i and j
# dcg_10psparseLV <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
#                             0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 
#                             0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
#                             0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
#                             0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 
#                             0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
#                             0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
#                             0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 
#                             0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
#                             0, 0, 0, 0, 0, 0, 0, 2, 1, 0), 10, 10, byrow = T)

dcg_10psparseLV <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
                            0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
                            0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                            0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 
                            0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                            0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
                            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                            0, 0, 0, 0, 0, 0, 0, 2, 1, 0), 10, 10, byrow = T)

trueag_10psparseLV <- true_ancestral(dcg_10psparseLV, gen_dat(B10_lvsparse), gaussCItest)
dimnames(trueag_10psparseLV) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))
plotAG(trueag_10psparseLV)


## Run CCD algorithm
ccd_10pLVsparse  <- simdata_10pLVsparse   %>%
  map_depth(2, ~ ccdKP(df = .x, dataType = "continuous", alpha = 0.05)
  )
mat_10pLVsparse   <- ccd_10pLVsparse %>% 
  map_depth(2, ~CreateAdjMat(.x, length(.x$nodes)))

# save(ccd_10pLVsparse, file="data/ccd_10pLVsparse.RData")
# load("data/ccd_10pLVsparse.RData")
par(mfrow=c(2,5))
pag_ccd10pLVsparse <- map2(ccd_10pLVsparse, mat_10pLVsparse,
                        ~map2(.x, .y, plotPAG)
                         )

## Run FCI algorithm
fci_10pLVsparse  <- simdata_10pLVsparse   %>%
  map_depth(2, ~fci(list(C = cor(.x), n = nrow(.x)), indepTest=gaussCItest,
           alpha = 0.05, doPdsep = TRUE, selectionBias= FALSE, labels = colnames(.x)) %>% .@amat # exxtract amat
  )

# save(fci_10pLVsparse, file="data/fci_10pLVsparse.RData")
# load("data/fci_10pLVsparse.RData")
par(mfrow=c(2,5))
pag_fci10pLV  <- fci_10pLVsparse %>%
  map_depth(2, ~plotAG(.x))

## Run CCI algorithm
cci_10pLVsparse  <- simdata_10pLVsparse %>%
  map_depth(2, ~cci(list(C = cor(.x), n = nrow(.x)), gaussCItest, alpha=0.05, labels = colnames(.x), p = ncol(.x)) %>% .$maag  # convert some logical matrix (0, 1 only) to a numeric matrix while keeping a matrix format (lost the row names but they are not needed)
  )

# save(cci_10pLVsparse, file="data/cci_10pLVsparse.RData")
# load("data/cci_10pLV.RData")
par(mfrow=c(2,5))
pag_cci10pLVsparse   <- cci_10pLVsparse %>%
  map_depth(2, ~plotAG(.x))



## evaluation
# CCD
res_ccd10pLVsparse   <- mat_10pLVsparse  %>% 
  map_depth(2, ~precision_recall(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_ccd10pLVsparse  <- mat_10pLVsparse  %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_ccd10pLVsparse , na.rm=T)

# SHD
SHD_ccd10pLVsparse <- mat_10pLVsparse %>% 
  map_depth(2, ~SHD(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_ccd10pLVsparse)

# FCI
res_fci10pLVsparse <- fci_10pLVsparse  %>% 
  map_depth(2, ~precision_recall(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_fci10pLVsparse <- fci_10pLVsparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_fci10pLVsparse, na.rm=T)


# SHD
SHD_fci10pLVsparse <- fci_10pLVsparse %>% 
  map_depth(2, ~SHD(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_fci10pLVsparse)


# CCI 
res_cci10pLVsparse <- cci_10pLVsparse %>% 
  map_depth(2, ~precision_recall(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 


# UNCERTAINTY
uncer_cci10pLVsparse <- cci_10pLVsparse %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_cci10pLVsparse, na.rm=T)

# SHD
SHD_cci10pLVsparse <- cci_10pLVsparse %>% 
  map_depth(2, ~SHD(trueag_10psparseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_cci10pLVsparse)
```


## 10p_LVdense
```{r}
#| label: 10pLVdense


## ====================
## 10p with LV dense
## ====================
# specify B matrix

# B10_lvdense = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                        0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4,
#                        0.4, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                        0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 0, 0,
#                        0, 0, 0.6, 1, 0, 0, 0, 0, 0, 0, 0, 0.5,
#                        0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 0, 0,
#                        0, 0, 0, 0, 0, 0, 0, 1, 0.8, 0.6, 0, 0,
#                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8, 0,
#                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4, 0, 0,
#                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0,
#                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 12, 12, byrow = T)


B10_lvdense = matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0.5, 0, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 0.7,
                       0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0.7, 0, 0, 0.9, 0, 0, 0, 0, 0, 0,
                       0, 0, 0.6, 1, 0, 0, 0, 0, 0, 0, 0, 0.7,
                       0, 0, 0, 0, 0.8, 0, 0.5, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0.8, 0, 0.6, 0,
                       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0.8, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 12, 12, byrow = T)



colnames(B10_lvdense) <- c(paste("X", 1:10, sep=""), "L1", "L2")

# specify layout
layout10LV2 = matrix(c(0, 1,
                      2, 1,
                      1, 0,
                      2, -1,
                      3, 0,
                      4, -1,
                      5, 0,
                      6, -1,
                      4, 1,
                      7, 1,
                      8, 0,
                      3, 2), 12, 2, byrow = T)

par(mfrow=c(1,2))
true10pLVdense <- qgraph(t(B10_lvdense), layout = layout10LV2, labels = colnames(B10_lvdense), theme="colorblind")

## Data generating
# equilibrium check
equilibrium_check(B10_lvdense)

# generate data (sample size as specified above)
simdata_10pLVdense <- N %>% future_map(function(z) {
  replicate(n = n,
            expr = gen_dat(B10_lvdense, N = z)[,-c(11,12)],  
            simplify = FALSE)
}, .options = furrr_options(seed=123))


## True Ancestral Graph
# [i,j] = [j,i] = 2: a LV exists between i and j
dcg_10pdenseLV <- matrix(c(0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
                           0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 
                           0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                           0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 
                           0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
                           0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
                           0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                           0, 0, 0, 0, 0, 0, 2, 2, 1, 0), 10, 10, byrow = T)


trueag_10pdenseLV <- true_ancestral(dcg_10pdenseLV, gen_dat(B10_lvdense), gaussCItest)
dimnames(trueag_10pdenseLV) <- list(paste("X", 1:10, sep=""), paste("X", 1:10, sep=""))
plotAG(trueag_10pdenseLV)


## Run CCD algorithm
ccd_10pLVdense  <- simdata_10pLVdense   %>%
  map_depth(2, ~ ccdKP(df = .x, dataType = "continuous", alpha = 0.05)
  )
mat_10pLVdense   <- ccd_10pLVdense %>% 
  map_depth(2, ~CreateAdjMat(.x, length(.x$nodes)))

# save(ccd_10pLVdense, file="data/ccd_10pLVdense.RData")
# load("data/ccd_10pLV.RData")

par(mfrow=c(2,5))
pag_ccd10pLVdense <- map2(ccd_10pLVdense, mat_10pLVdense,
                        ~map2(.x, .y, plotPAG)
                         )

## Run FCI algorithm
fci_10pLVdense  <- simdata_10pLVdense   %>%
  map_depth(2, ~fci(list(C = cor(.x), n = nrow(.x)), indepTest=gaussCItest,
           alpha = 0.05, doPdsep = TRUE, selectionBias= FALSE, labels = colnames(.x)) %>% .@amat # exxtract amat
  )

# save(fci_10pLVdense, file="data/fci_10pLVdense.RData")
# load("data/fci_10pLV.RData")
par(mfrow=c(2,5))
pag_fci10pLVdense <- fci_10pLVdense   %>%
  map_depth(2, ~plotAG(.x))

## Run CCI algorithm
cci_10pLVdense  <- simdata_10pLVdense  %>%
  map_depth(2, ~cci(list(C = cor(.x), n = nrow(.x)), gaussCItest, alpha=0.05, labels = colnames(.x), p = ncol(.x)) %>% .$maag  # convert some logical matrix (0, 1 only) to a numeric matrix while keeping a matrix format (lost the row names but they are not needed)
  )

# save(cci_10pLVdense, file="data/cci_10pLVdense.RData")
# load("data/cci_10pLV.RData")
par(mfrow=c(2,5))
pag_cci10pLVdense   <- cci_10pLVdense %>%
  map_depth(2, ~plotAG(.x))



## evaluation
# CCD
res_ccd10pLVdense   <- mat_10pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_ccd10pLVdense  <- mat_10pLVdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_ccd10pLVdense , na.rm=T)

# SHD
SHD_ccd10pLVdense <- mat_10pLVdense %>% 
  map_depth(2, ~SHD(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N)) 
# average SHD
colMeans(SHD_ccd10pLVdense)

# FCI
res_fci10pLVdense <- fci_10pLVdense  %>% 
  map_depth(2, ~precision_recall(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_fci10pLVdense <- fci_10pLVdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_fci10pLVdense, na.rm=T)

# SHD
SHD_fci10pLVdense <- fci_10pLVdense %>% 
  map_depth(2, ~SHD(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_fci10pLVdense)

# CCI
res_cci10pLVdense <- cci_10pLVdense %>% 
  map_depth(2, ~precision_recall(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% t() %>%  apply(., 2, unlist) %>%  as.data.frame() 

# UNCERTAINTY
uncer_cci10pLVdense <- cci_10pLVdense %>% 
  map_depth(2, ~uncertainty(.x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average uncertainty
colMeans(uncer_cci10pLVdense, na.rm=T)


# SHD
SHD_cci10pLVdense <- cci_10pLVdense %>% 
  map_depth(2, ~SHD(trueag_10pdenseLV, .x)) %>% 
  do.call("cbind", .) %>% apply(., 2, unlist) %>%  
  as.data.frame %>% rename_with(~ paste0("N = ", N))
# average SHD
colMeans(SHD_cci10pLVdense)

```

## Eval Plots per Case

::: {.panel-tabset}

## 5P sparse
```{r}
#| fig-width: 10
#| fig-height: 5
#| eval: false

par(mfrow=c(2,5))
vec <- list("CCD-5p-sparse" = mat_5psparse, "FCI-5p-sparse" = fci_5psparse, "CCI-5p-sparse" = cci_5psparse)

graphs_5psparse <- list()
for(i in seq_along(vec)){
  ## high-freq graphs
  graphs_5psparse[[i]] <- vec[[i]] %>% 
  map(~high_freq(.x, p = 5) %>% 
        plotAG)
  ## correct prop plots
  vec[[i]] %>% 
    imap(
      ~ prop_correct(.x, trueag_5psparse, p = 5) %>% 
        # long format
        reshape2::melt() %>% 
        ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
        geom_tile() +
        geom_text() + 
        # reverse factor level
        scale_y_discrete(limits=rev) + 
        scale_fill_gradient(low="grey90", high="blue") +
        labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
    ) %>% 
    ggpubr::ggarrange(plotlist = .,
                      ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
    ggpubr::annotate_figure(top = text_grob(glue::glue("Correct Proportion {names(vec[[i]])}"), face = "bold", size = 18, family = "Palatino"))
  ## uncertainty prop plots
  vec[[i]] %>% 
    imap(
      ~ prop_uncertain(.x, p = 5) %>% 
        # long format
        reshape2::melt() %>% 
        ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
        geom_tile() +
        geom_text() + 
        # reverse factor level
        scale_y_discrete(limits=rev) + 
        scale_fill_gradient(low="grey90", high="red") +
        labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
    ) %>% 
    ggpubr::ggarrange(plotlist = .,
                      ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
    ggpubr::annotate_figure(top = text_grob(glue::glue("Uncertainty {names(vec)[i]}"), face = "bold", size = 18, family = "Palatino"))
}

corprop_plots_5psparse <- list()
# prop correct
for(i in seq_along(vec)){
  corprop_plots_5psparse[[i]] <- vec[[i]] %>% 
    imap(
      ~ prop_correct(.x, trueag_5psparse, p = 5) %>% 
        # long format
        reshape2::melt() %>% 
        ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
        geom_tile() +
        geom_text() + 
        # reverse factor level
        scale_y_discrete(limits=rev) + 
        scale_fill_gradient(low="grey90", high="blue") +
        labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
    ) %>% 
    ggpubr::ggarrange(plotlist = .,
                      ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
    ggpubr::annotate_figure(top = text_grob(glue::glue("Correct Proportion {names(vec[[i]])}"), face = "bold", size = 18, family = "Palatino"))
}

ucprop_plots_5psparse <- list()
# prop uncertain
for(i in seq_along(vec)){
  ucprop_plots_5psparse[[i]] <- vec[[i]] %>% 
    imap(
      ~ prop_uncertain(.x, p = 5) %>% 
        # long format
        reshape2::melt() %>% 
        ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
        geom_tile() +
        geom_text() + 
        # reverse factor level
        scale_y_discrete(limits=rev) + 
        scale_fill_gradient(low="grey90", high="red") +
        labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
    ) %>% 
    ggpubr::ggarrange(plotlist = .,
                      ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
    ggpubr::annotate_figure(top = text_grob(glue::glue("Uncertainty {names(vec)[i]}"), face = "bold", size = 18, family = "Palatino"))
}
```



```{r}
#| fig-width: 10
#| fig-height: 5


## CCD 5p sparse case
# high frequency
par(mfrow=c(2,5))
mat_5psparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
mat_5psparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparse, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-5p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_5psparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-5p-sparse", face = "bold", size = 18, family = "Palatino"))


## FCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

fci_5psparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
fci_5psparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparse, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_5psparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))



## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_5psparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
cci_5psparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparse, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_5psparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))

```

## 5P dense
```{r}
#| fig-width: 10
#| fig-height: 5

## CCD 5p dense case
# high frequency 
par(mfrow=c(2,5))
mat_5pdense %>% 
  map(~high_freq(.x, p = 5) %>% 
        plotAG)

# prop correct
mat_5pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_5pdense, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-5p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_5pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-5p-dense", face = "bold", size = 18, family = "Palatino"))


## FCI 5p dense case
# high frequency 
par(mfrow=c(2,5))

fci_5pdense %>% 
  map(~high_freq(.x, p = 5) %>% 
        plotAG)

# prop correct
fci_5pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_5pdense, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-5p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_5pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-5p-dense", face = "bold", size = 18, family = "Palatino"))



## CCI 5p dense case
# high frequency 
par(mfrow=c(2,5))

cci_5pdense %>% 
  map(~high_freq(.x, p = 5) %>% 
        plotAG)

# prop correct
cci_5pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_5pdense, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-5p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_5pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 5) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-5p-dense", face = "bold", size = 18, family = "Palatino"))

```


## 10P sparse
```{r}
#| fig-width: 14
#| fig-height: 7


## CCD 10p sparse case
# high frequency 
par(mfrow=c(2,5))
mat_10psparse %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
mat_10psparse %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-10p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_10psparse %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-10p-sparse", face = "bold", size = 18, family = "Palatino"))


## FCI 10p sparse case
# high frequency 
par(mfrow=c(2,5))

fci_10psparse %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
fci_10psparse %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_10psparse %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))



## CCI 10p sparse case
# high frequency 
par(mfrow=c(2,5))

cci_10psparse %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
cci_10psparse %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_10psparse %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))

```


## 10P dense
```{r}
#| fig-width: 14
#| fig-height: 7


## CCD 10p dense case
# high frequency 
par(mfrow=c(2,5))
mat_10pdense %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
mat_10pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_10pdense, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-10p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_10pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-10p-dense", face = "bold", size = 18, family = "Palatino"))


## FCI 10p dense case
# high frequency 
par(mfrow=c(2,5))

fci_10pdense %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
fci_10pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-10p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_10pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-10p-dense", face = "bold", size = 18, family = "Palatino"))



## CCI 10p dense case
# high frequency 
par(mfrow=c(2,5))

cci_10pdense %>% 
  map(~high_freq(.x, p = 10) %>% 
        plotAG)

# prop correct
cci_10pdense %>% 
  imap(
    ~ prop_correct(.x, trueag_10psparse, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-10p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_10pdense %>% 
  imap(
    ~ prop_uncertain(.x, p = 10) %>% 
      # long format
      reshape2::melt() %>% 
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) + 
      geom_tile() +
      geom_text() + 
      # reverse factor level
      scale_y_discrete(limits=rev) + 
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}")) 
  ) %>% 
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-10p-dense", face = "bold", size = 18, family = "Palatino"))

```


## 5P sparse - LV
```{r}
#| fig-width: 10
#| fig-height: 5

## CCD 5p sparse LV case
# high frequency
par(mfrow=c(2,5))
mat_5pLVsparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
mat_5pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-5p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_5pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-5p-LV-sparse", face = "bold", size = 18, family = "Palatino"))


# high frequency
par(mfrow=c(2,5))

fci_5pLVsparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
fci_5pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_5pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-5p-sparse", face = "bold", size = 18, family = "Palatino"))



## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_5pLVsparse %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
cci_5pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_5psparseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-5p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_5pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-5p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

```



## 5P dense - LV
```{r}
#| fig-width: 10
#| fig-height: 5

## CCD 5p dense LV case
# high frequency
par(mfrow=c(2,5))
mat_5pLVdense %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
mat_5pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_5pdenseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-5p-LV-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_5pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-5p-LV-dense", face = "bold", size = 18, family = "Palatino"))


# high frequency
par(mfrow=c(2,5))

fci_5pLVdense %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
fci_5pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_5pdenseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-5p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_5pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-5p-dense", face = "bold", size = 18, family = "Palatino"))



## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_5pLVdense %>%
  map(~high_freq(.x, p = 5) %>%
        plotAG)

# prop correct
cci_5pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_5pdenseLV, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-5p-LV-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_5pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 5) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-5p-LV-dense", face = "bold", size = 18, family = "Palatino"))

```


## 10P sparse - LV
```{r}
#| fig-width: 14
#| fig-height: 7

## CCD 10p sparse LV case
# high frequency
par(mfrow=c(2,5))
mat_10pLVsparse %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
mat_10pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_10psparseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-10p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_10pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-10p-LV-sparse", face = "bold", size = 18, family = "Palatino"))


# high frequency
par(mfrow=c(2,5))

fci_10pLVsparse %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
fci_10pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_10psparseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_10pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-10p-sparse", face = "bold", size = 18, family = "Palatino"))



## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_10pLVsparse %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
cci_10pLVsparse %>%
  imap(
    ~ prop_correct(.x, trueag_10psparseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-10p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_10pLVsparse %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-10p-LV-sparse", face = "bold", size = 18, family = "Palatino"))

```




## 10P dense - LV
```{r}
#| fig-width: 14
#| fig-height: 7

## CCD 10p dense LV case
# high frequency
par(mfrow=c(2,5))
mat_10pLVdense %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
mat_10pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_10pdenseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCD-10p-LV-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
mat_10pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCD-10p-LV-dense", face = "bold", size = 18, family = "Palatino"))


# high frequency
par(mfrow=c(2,5))

fci_10pLVdense %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
fci_10pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_10pdenseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion FCI-10p-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
fci_10pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty FCI-10p-dense", face = "bold", size = 18, family = "Palatino"))



## CCI 5p sparse case
# high frequency
par(mfrow=c(2,5))

cci_10pLVdense %>%
  map(~high_freq(.x, p = 10) %>%
        plotAG)

# prop correct
cci_10pLVdense %>%
  imap(
    ~ prop_correct(.x, trueag_10pdenseLV, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="blue") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Correct Proportion CCI-10p-LV-dense", face = "bold", size = 18, family = "Palatino"))

# prop uncertain
cci_10pLVdense %>%
  imap(
    ~ prop_uncertain(.x, p = 10) %>%
      # long format
      reshape2::melt() %>%
      ggplot(aes(x = Var2, y = Var1, fill = value, label= value)) +
      geom_tile() +
      geom_text() +
      # reverse factor level
      scale_y_discrete(limits=rev) +
      scale_fill_gradient(low="grey90", high="red") +
      labs(x = "", y="", title = glue::glue("N = {N[.y]}"))
  ) %>%
  ggpubr::ggarrange(plotlist = .,
                    ncol = 5, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  ggpubr::annotate_figure(top = text_grob("Uncertainty CCI-10p-LV-dense", face = "bold", size = 18, family = "Palatino"))

```


:::

## Overall Eval Plots
```{r}
#| fig-width: 14
#| fig-height: 7

## Precision & Recall
# compute the average precision and sd
results <- list(res_ccd5psparse, res_fci5psparse, res_cci5psparse, res_ccd10psparse, res_fci10psparse, res_cci10psparse, res_ccd5pdense, res_fci5pdense, res_cci5pdense, res_ccd10pdense, res_fci10pdense, res_cci10pdense, res_ccd5pLVsparse, res_fci5pLVsparse, res_cci5pLVsparse, res_ccd5pLVdense, res_fci5pLVdense, res_cci5pLVdense, res_ccd10pLVsparse, res_fci10pLVsparse, res_cci10pLVsparse, res_ccd10pdense,  res_fci10pLVdense, res_cci10pLVdense) %>% 
  # transpose df
  map(~ sjmisc::rotate_df(.x) %>%
        # add sample size (N) info
        rename_with(~paste0(.x, "N = ", rep(N, each=8)))  %>%
        # think about how to deal with NAs or do I want to define sth. else instead of NAs.
        #na.omit(.x) %>% 
        summarise(across(everything(.), list(mean = ~mean(., na.rm=T), sd = ~sd(., na.rm=T))))) %>% 
  bind_rows() %>% 
  mutate(algorithm = rep(c("ccd", "fci", "cci"), 8),
         condition = rep(c("5p_sparse", "10p_sparse", "5p_dense", "10p_dense", "5p_LVsparse", "5p_LVdense", "10p_LVsparse", "10p_LVdense"), each=3)) %>%
  # brings the algorithm and condition names first
  relocate(where(is.character), .before = where(is.numeric)) %>% 
  # convert it to a long format
  tidyr::pivot_longer(!c(algorithm, condition), names_to = "metric", values_to = "value") %>% 
  # Add sample size column (N) & clean up the column name 
  mutate(N = stringr::str_extract(metric, "(?<=[N =])\\d+"),
         metric = stringr::str_replace_all(metric, "[0-9.]+|[N =]", "")) 

## Uncertainty
uncertainties <- bind_rows("ccd_5p-sparse" = uncer_ccd5psparse, "fci_5p-sparse" = uncer_fci5psparse, "cci_5p-sparse"=uncer_cci5psparse, "ccd_10p-sparse"=uncer_ccd10psparse, "fci_10p-sparse" = uncer_fci10psparse, "cci_10p-sparse" = uncer_cci10psparse, "ccd_5p-dense"=uncer_ccd5pdense, "fci_5p-dense"=uncer_fci5pdense, "cci_5p-dense"=uncer_cci5pdense, "ccd_10p-dense"=uncer_ccd10pdense, "fci_10p-dense"=uncer_fci10pdense, "cci_10p-dense"=uncer_cci10pdense, "ccd_5p-LVsparse"=uncer_ccd5pLVsparse, "fci_5p-LVsparse"=uncer_fci5pLVsparse, "cci_5p-LVsparse"=uncer_cci5pLVsparse, "ccd_10p-LVsparse"=uncer_ccd10pLVsparse, "fci_10p-LVsparse"=uncer_fci10pLVsparse, "cci_10p-LVsparse"=uncer_cci10pLVsparse,
                           "ccd_5p-LVdense"=uncer_ccd5pLVdense, "fci_5p-LVdense"=uncer_fci5pLVdense, "cci_5p-LVdense"=uncer_cci5pLVdense, "ccd_10p-LVdense"=uncer_ccd10pLVdense, "fci_10p-LVdense"=uncer_fci10pLVdense, "cci_10p-LVdense"=uncer_cci10pLVdense,.id="id") %>% 
  group_by(id) %>% 
  summarise_all(list(means = mean, sds = sd)) %>%  
  mutate(algorithm = stringr::str_split(id, "_", simplify = T)[,1],
         condition = stringr::str_split(id, "_", simplify = T)[,2]) %>% 
  tidyr::pivot_longer(!c(algorithm, condition, id), names_to = "name", values_to = "value") %>% 
  mutate(N = stringr::str_extract(stringr::str_split(name, "_", simplify = T)[,1], "(\\d)+"),
         statistics = stringr::str_split(name, "_", simplify = T)[,2]) %>% 
  dplyr::select(-id, -name) %>%  relocate(where(is.character), .before = where(is.numeric))



## SHD
SHDs <- bind_rows("ccd_5p-sparse" = SHD_ccd5psparse, "fci_5p-sparse" = SHD_fci5psparse, "cci_5p-sparse"=SHD_cci5psparse, "ccd_10p-sparse"= SHD_ccd10psparse, "fci_10p-sparse" = SHD_fci10psparse, "cci_10p-sparse" = SHD_cci10psparse, "ccd_5p-dense"= SHD_ccd5pdense, "fci_5p-dense"=SHD_fci5pdense, "cci_5p-dense"=SHD_cci5pdense, "ccd_10p-dense"= SHD_ccd10pdense, "fci_10p-dense"=SHD_fci10pdense, "cci_10p-dense"=SHD_cci10pdense, "ccd_5p-LVsparse"=SHD_ccd5pLVsparse, "fci_5p-LVsparse"=SHD_fci5pLVsparse, "cci_5p-LVsparse"=SHD_cci5pLVsparse, "ccd_10p-LVsparse"=SHD_ccd10pLVsparse, "fci_10p-LVsparse"=SHD_fci10pLVsparse, "cci_10p-LVsparse"=SHD_cci10pLVsparse, 
                  "ccd_5p-LVdense"=SHD_ccd5pLVdense, "fci_5p-LVdense"=SHD_fci5pLVdense, "cci_5p-LVdense"=SHD_cci5pLVdense, "ccd_10p-LVdense"=SHD_ccd10pLVdense, "fci_10p-LVdense"=SHD_fci10pLVdense, "cci_10p-LVdense"=SHD_cci10pLVdense, .id="id") %>% 
  group_by(id) %>% 
  summarise_all(list(means = mean, sds = sd)) %>%  
  mutate(algorithm = stringr::str_split(id, "_", simplify = T)[,1],
         condition = stringr::str_split(id, "_", simplify = T)[,2]) %>% 
  tidyr::pivot_longer(!c(algorithm, condition, id), names_to = "name", values_to = "value") %>% 
  mutate(N = stringr::str_extract(stringr::str_split(name, "_", simplify = T)[,1], "(\\d)+"),
         statistics = stringr::str_split(name, "_", simplify = T)[,2]) %>% 
  dplyr::select(-id, -name) %>%  relocate(where(is.character), .before = where(is.numeric)) 



## Specify my custom theme
MyTheme <-  theme(plot.title = element_blank(),
                  plot.subtitle = element_text(face = "italic", family = "Palatino", size = 15, hjust=0.5),
                  axis.text=element_text(face = "bold",family = "Palatino", size = 13),
                  axis.text.x = element_text(angle = 45, hjust = 1.2, vjust =1.2),
                  legend.text = element_text(face = "bold", family = "Palatino", size = 13))

## ========================
## precision plots
## ========================
precision_plots <- c("5p_sparse", "5p_dense", "10p_sparse", "10p_dense", "5p_LVsparse", "5p_LVdense", "10p_LVsparse", "10p_LVdense" ) %>% 
  map(~
        results %>% 
        filter(condition == .x & grepl("average_precision", metric)) %>% 
        tidyr::pivot_wider(names_from = metric, values_from=value) %>% 
        ggplot(aes(x= factor(N, levels = c("50", "150", "500", "1000", "1500", "2000", "2500", "3000", "4000", "5000")), y=average_precision_mean, group = algorithm, colour = algorithm, fill=algorithm)) +
        geom_line(aes(group = algorithm)) +
        geom_point(size=1) +
        #geom_errorbar(aes(ymin=average_precision_mean-qnorm(0.975)*average_precision_sd/sqrt(as.numeric(N)), ymax=average_precision_mean+qnorm(0.975)*average_precision_sd/sqrt(as.numeric(N))), width=0.1) +
        geom_ribbon(aes(ymin=average_precision_mean-qnorm(0.975)*average_precision_sd/sqrt(as.numeric(N)), ymax=average_precision_mean+qnorm(0.975)*average_precision_sd/sqrt(as.numeric(N))), alpha=0.2, color=NA) +
        scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
        scale_fill_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
        labs(x="N", y="", title = "", subtitle = .x) +
        # check if ylim is set reasonably
        ylim(0, 1) +
        #scale_y_continuous(limits = c(0.4, 1)) +
        theme_classic() + MyTheme
  )


## ========================
## recall plots
## ========================
recall_plots <-  c("5p_sparse", "5p_dense", "10p_sparse", "10p_dense", "5p_LVsparse", "5p_LVdense", "10p_LVsparse", "10p_LVdense" ) %>% 
  map(~
        results %>% 
        filter(condition == .x & grepl("average_recall", metric)) %>% 
        tidyr::pivot_wider(names_from = metric, values_from=value) %>% 
        ggplot(aes(x= factor(N, levels = c("50", "150", "500", "1000", "1500", "2000", "2500", "3000", "4000", "5000")), y=average_recall_mean, group = algorithm, colour = algorithm, fill= algorithm)) +
        geom_line(aes(group = algorithm)) +
        geom_point(size=1) +
        #geom_errorbar(aes(ymin=average_recall_mean-qnorm(0.975)*average_recall_sd/sqrt(as.numeric(N)), ymax=average_recall_mean+qnorm(0.975)*average_recall_sd/sqrt(as.numeric(N))), width=0.1) +
        geom_ribbon(aes(ymin=average_recall_mean-qnorm(0.975)*average_recall_sd/sqrt(as.numeric(N)), ymax=average_recall_mean+qnorm(0.975)*average_recall_sd/sqrt(as.numeric(N))), alpha=0.2, color=NA) +
        scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
        scale_fill_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
        labs(x="N", y="", title = "", subtitle = .x) +
        # check if ylim is set reasonably
        ylim(0, 1) +
        #scale_y_continuous(limits = c(0.4, 1)) +
        theme_classic() + MyTheme
  )

## ========================
## uncertainty plots
## ========================
## uncertainty (uncertainty rate of fci and cci are exactly the same!)
uncertainty_plots <-  c("5p-sparse", "5p-dense", "10p-sparse", "10p-dense", "5p-LVsparse", "5p-LVdense",  "10p-LVsparse", "10p-LVdense") %>% 
  map(~
        uncertainties %>%
        filter(condition == .x) %>% 
        tidyr::pivot_wider(names_from = statistics, values_from=value) %>% 
        ggplot(aes(x= factor(N, levels = c("50", "150", "500", "1000", "1500", "2000", "2500", "3000", "4000", "5000")), y=means, group = algorithm, colour = algorithm, fill=algorithm)) +
        geom_line(aes(group = algorithm)) +
        geom_point(size=1) +
        #geom_errorbar(aes(ymin=mean-qnorm(0.975)*sd/sqrt(as.numeric(N)), ymax=mean+qnorm(0.975)*sd/sqrt(as.numeric(N))), width=0.1) +
        geom_ribbon(aes(ymin=means-qnorm(0.975)*sds/sqrt(as.numeric(N)), ymax=means+qnorm(0.975)*sds/sqrt(as.numeric(N))), alpha=0.2, color=NA) +
        scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
        scale_fill_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
        labs(x="N", y="", title = "", subtitle = .x) +
        # check if ylim is reasonably set...
        #ylim(0, 1) +
        ylim(0, 20) +
        #scale_y_continuous(limits = c(0.4, 1)) +
        theme_classic() + MyTheme
  )


## ========================
## SHD plots 
## ========================
SHD_plots <- c("5p-sparse", "5p-dense", "10p-sparse", "10p-dense", "5p-LVsparse", "5p-LVdense",  "10p-LVsparse", "10p-LVdense") %>% 
  map(~ 
        SHDs %>%
        filter(condition == .x) %>% 
        tidyr::pivot_wider(names_from = statistics, values_from=value) %>% 
        ggplot(aes(x= factor(N, levels = c("50", "150", "500", "1000", "1500", "2000", "2500", "3000", "4000", "5000")), y=means, group = algorithm, colour = algorithm, fill = algorithm)) +
        geom_line(aes(group = algorithm)) +
        geom_point(size=1) + 
        #geom_errorbar(aes(ymin=mean-qnorm(0.975)*sd/sqrt(as.numeric(N)), ymax=mean+qnorm(0.975)*sd/sqrt(as.numeric(N))), width=0.1) +
        geom_ribbon(aes(ymin=means-qnorm(0.975)*sds/sqrt(as.numeric(N)), ymax=means+qnorm(0.975)*sds/sqrt(as.numeric(N))), alpha=0.2, color=NA) +
        scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
        scale_fill_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
        labs(x="N", y="", title = "", subtitle = .x) +
        #scale_y_continuous(limits = ~c((min(means)-5), (max(means)+5))) +
        # check if ylim is set reasonably
        ylim(3, 45) +
        theme_classic() + MyTheme
  )




# combine plots
# precision plot
ggarrange(plotlist = precision_plots,
                            ncol = 4, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  annotate_figure(top = text_grob("Precision", face = "bold", size = 18, family = "Palatino"))

# recall plot
ggarrange(plotlist = recall_plots,
                         ncol = 4, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  annotate_figure(top = text_grob("Recall", face = "bold", size = 18, family = "Palatino"))


# uncertainty plot
ggarrange(plotlist = uncertainty_plots,
                        ncol = 4, nrow = 2, common.legend = TRUE, legend = "bottom") %>%
  annotate_figure(top = text_grob("Uncertainty", face = "bold", size = 18, family = "Palatino"))


# shd plot
ggarrange(plotlist = SHD_plots,
                      ncol = 4, nrow = 2, common.legend = TRUE, legend = "bottom") %>% 
  annotate_figure(top = text_grob("SHD", face = "bold", size = 15, family = "Palatino"))

```






## Running Time
```{r}
#| label: running time
#| fig-width: 10
#| fig-hight: 8

#remotes::install_github("joshuaulrich/microbenchmark")
library(microbenchmark)

times <- microbenchmark(
  ccd_5psparse = ccdKP(df=simdata_5psparse[[1]][[1]], dataType = "continuous", alpha = 0.05),
  fci_5psparse = fci(list(C = cor(simdata_5psparse[[1]][[1]]), n = 1e1), indepTest=gaussCItest, alpha = 0.05, selectionBias= FALSE, labels = colnames(simdata_5psparse[[1]][[1]])),
  cci_5psparse = cci(list(C = cor(simdata_5psparse[[1]][[1]]), n = 1e1), gaussCItest, alpha=0.05, p=ncol(simdata_5psparse[[1]][[1]])),

  ccd_5pdense = ccdKP(df=simdata_5pdense[[1]][[1]], dataType = "continuous", alpha = 0.05),
  fci_5pdense = fci(list(C = cor(simdata_5pdense[[1]][[1]]), n = 1e1),indepTest=gaussCItest, alpha = 0.05, selectionBias= FALSE, labels = colnames(simdata_5pdense[[1]][[1]])),
  cci_5pdense = cci(list(C = cor(simdata_5pdense[[1]][[1]]), n = 1e1), gaussCItest, alpha=0.05, p=ncol(simdata_5pdense[[1]][[1]])),

  ccd_10psparse = ccdKP(df=simdata_10psparse[[1]][[1]], dataType = "continuous", alpha = 0.05),
  fci_10psparse = fci(list(C = cor(simdata_10psparse[[1]][[1]]), n = 1e1),indepTest=gaussCItest, alpha = 0.05, doPdsep = TRUE, selectionBias= FALSE, labels = colnames(simdata_10psparse[[1]][[1]])),
  cci_10psparse = cci(list(C = cor(simdata_10psparse[[1]][[1]]), n = 1e1), gaussCItest, alpha=0.05, p=ncol(simdata_10psparse[[1]][[1]])),

  ccd_10pdense = ccdKP(df=simdata_10pdense[[1]][[1]], dataType = "continuous", alpha = 0.05),
  fci_10pdense = fci(list(C = cor(simdata_10pdense[[1]][[1]]), n = 1e1),indepTest=gaussCItest, alpha = 0.05, selectionBias= FALSE, labels = colnames(simdata_10pdense[[1]][[1]])),
  cci_10pdense = cci(list(C = cor(simdata_10pdense[[1]][[1]]), n = 1e1), gaussCItest, alpha=0.05, p=ncol(simdata_10pdense[[1]][[1]])),

  ccd_5pLVsparse = ccdKP(df=simdata_5pLVsparse[[1]][[1]], dataType = "continuous", alpha = 0.05),
  fci_5pLVsparse = fci(list(C = cor(simdata_5pLVsparse[[1]][[1]]), n = 1e1),indepTest=gaussCItest,
                alpha = 0.05, selectionBias= FALSE, labels = colnames(simdata_5pLVsparse[[1]][[1]])),
  cci_5pLVsparse = cci(list(C = cor(simdata_5pLVsparse[[1]][[1]]), n = 1e1), gaussCItest, alpha=0.05, p=ncol(simdata_5pLVsparse[[1]][[1]])),

  ccd_5pLVdense = ccdKP(df=simdata_5pLVdense[[1]][[1]], dataType = "continuous", alpha = 0.05),
  fci_5pLVdense = fci(list(C = cor(simdata_5pLVdense[[1]][[1]]), n = 1e1),indepTest=gaussCItest,
                       alpha = 0.05, selectionBias= FALSE, labels = colnames(simdata_5pLVdense[[1]][[1]])),
  cci_5pLVdense = cci(list(C = cor(simdata_5pLVdense[[1]][[1]]), n = 1e1), gaussCItest, alpha=0.05, p=ncol(simdata_5pLVdense[[1]][[1]])),
  
  ccd_10pLVsparse = ccdKP(df=simdata_10pLVsparse[[1]][[1]], dataType = "continuous", alpha = 0.05),
  fci_10pLVsparse = fci(list(C = cor(simdata_10pLVsparse[[1]][[1]]), n = 1e1),indepTest=gaussCItest,
                alpha = 0.05, selectionBias= FALSE, labels = colnames(simdata_10pLVsparse[[1]][[1]])),
  cci_10pLVsparse = cci(list(C = cor(simdata_10pLVsparse[[1]][[1]]), n = 1e1), gaussCItest, alpha=0.05, p=ncol(simdata_10pLVsparse[[1]][[1]])),
  
  ccd_10pLVdense = ccdKP(df=simdata_10pLVdense[[1]][[1]], dataType = "continuous", alpha = 0.05),
  fci_10pLVdense = fci(list(C = cor(simdata_10pLVdense[[1]][[1]]), n = 1e1),indepTest=gaussCItest,
                        alpha = 0.05, selectionBias= FALSE, labels = colnames(simdata_10pLVdense[[1]][[1]])),
  cci_10pLVdense = cci(list(C = cor(simdata_10pLVdense[[1]][[1]]), n = 1e1), gaussCItest, alpha=0.05, p=ncol(simdata_10pLVdense[[1]][[1]]))
  
)


times <- times %>%
  mutate(algorithm = substr(expr, 1, 3),
         condition = stringr::str_split(expr, "_", simplify=T)[,2])

## plot the results
times %>%
  ggplot(aes(x=factor(condition, levels= c("5psparse", "5pdense", "10psparse", "10pdense", "5pLVsparse","5pLVdense", "10pLVsparse","10pLVdense")), y = log(time), col= factor(algorithm))) +
  geom_boxplot(position = "dodge",   outlier.size = 0.8, outlier.alpha = 0.2) + theme_classic() +
  # scale_x_discrete(name ="Condition",
  #                  labels=c("", "5p-sparse", "", "","5p-dense","","", "10p-sparse","","","10p-dense","","","5p-LV","","","10p-LV","")) +
  scale_colour_manual(values = c("#FF0000", "#00A08A", "#F2AD00"), name= "") +
  labs(y = " log(ms)", x = "conditions", title = "Algorithm Running Time", subtitle = "Time in milliseconds (ms)") +
  theme(axis.text.x = element_text(face = "bold", angle=40, margin = margin(t = 13)))

```
